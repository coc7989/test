import React, { useState, useEffect } from 'react';
import { useDropzone } from 'react-dropzone';
import axios from 'axios';

const InputForm = () => {
    const [files, setFiles] = useState([]);
    const [fileAlert, setFileAlert] = useState('');
    const [validationResults, setValidationResults] = useState({});
    const [isSubmitDisabled, setIsSubmitDisabled] = useState(false);

    const onDrop = async (acceptedFiles) => {
        const txtFiles = acceptedFiles.filter((file) => file.name.endsWith('.txt'));

        if (txtFiles.length !== acceptedFiles.length) {
            setFileAlert('Only .txt files are allowed');
            return;
        }

        setFileAlert('');
        const newFiles = [...files, ...txtFiles];
        setFiles(newFiles);

        // Validate each file
        for (const file of txtFiles) {
            await validateMacId(file);
        }
    };

    const validateMacId = async (file) => {
        const formData = new FormData();
        formData.append('file', file);

        try {
            const response = await axios.post('/api/validate-mac-id', formData);
            const { isValid, macId } = response.data;
            setValidationResults(prevResults => ({
                ...prevResults,
                [file.name]: { isValid, macId }
            }));
        } catch (error) {
            console.error('Error validating MAC ID:', error);
        }
    };

    const { getRootProps, getInputProps } = useDropzone({ onDrop });

    const removeFile = (indexToRemove) => {
        const updatedFiles = files.filter((_, index) => index !== indexToRemove);
        setFiles(updatedFiles);

        const updatedValidationResults = { ...validationResults };
        delete updatedValidationResults[files[indexToRemove].name];
        setValidationResults(updatedValidationResults);
    };

    useEffect(() => {
        const hasInvalidMacId = Object.values(validationResults).some(result => !result.isValid);
        setIsSubmitDisabled(hasInvalidMacId);
    }, [validationResults]);

    const handleSubmit = (event) => {
        event.preventDefault();
        // Handle form submission
    };

    return (
        <form onSubmit={handleSubmit}>
            <div {...getRootProps({ className: 'dropzone' })}>
                <input {...getInputProps()} />
                <p>Upload Files: Single/Multiple</p>
            </div>
            {fileAlert && <p>{fileAlert}</p>}
            <ul>
                {files.map((file, index) => (
                    <li key={index}>
                        {file.name} - {validationResults[file.name] ? (
                            validationResults[file.name].isValid ? 'Valid MAC ID' : `Invalid MAC ID (${validationResults[file.name].macId})`
                        ) : 'Validating...'}
                        <button type="button" onClick={() => removeFile(index)}>Remove</button>
                    </li>
                ))}
            </ul>
            <button type="submit" disabled={isSubmitDisabled} style={{ backgroundColor: isSubmitDisabled ? 'grey' : 'blue' }}>
                Submit
            </button>
        </form>
    );
};

export default InputForm;
