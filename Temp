import subprocess
import re
import json
from datetime import datetime
import pandas as pd
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication

# Load config from external file
def load_config(config_file):
    with open(config_file, 'r') as file:
        return json.load(file)

# Convert time limits (e.g., "20 days", "15 mins") to seconds
def convert_time_to_seconds(time_str):
    if "days" in time_str:
        days = int(re.search(r'\d+', time_str).group())
        return days * 24 * 3600  # 1 day = 24 * 3600 seconds
    elif "mins" in time_str:
        mins = int(re.search(r'\d+', time_str).group())
        return mins * 60  # 1 minute = 60 seconds
    return int(re.search(r'\d+', time_str).group())  # fallback, if only seconds are provided

# Run the bjobs command and fetch job data
def get_bjobs_output():
    command = "bjobs -u all -r -o 'delimiter=\",\" user jobid jobindex queue start_time run_time stat' | sort -g | grep -v gui"
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    return result.stdout.strip()

# Parse the output from the bjobs command
def parse_bjobs_output(bjobs_output):
    jobs = []
    for line in bjobs_output.splitlines():
        user, jobid, jobindex, queue, start_time, run_time, status = line.split(',')
        run_time_sec = int(re.search(r'\d+', run_time).group())
        jobs.append({
            "user": user,
            "jobid": jobid,
            "jobindex": jobindex,
            "queue": queue,
            "start_time": start_time,
            "run_time": run_time_sec,
            "status": status
        })
    return jobs

# Check if the job is expired or going to expire
def categorize_jobs(jobs, config):
    already_expired_job_ids = []
    going_to_expire_job_ids = []

    for job in jobs:
        queue_name = job['queue']
        queue_config = config[queue_name]
        run_time_limit = convert_time_to_seconds(queue_config['run_time_limit'])
        remainders = [convert_time_to_seconds(f"{r} days") for r in queue_config['remainders']]

        if job['run_time'] >= run_time_limit:
            already_expired_job_ids.append(job)
        elif any(job['run_time'] >= remainder for remainder in remainders):
            going_to_expire_job_ids.append(job)

    return already_expired_job_ids, going_to_expire_job_ids

# Generate final data to be emailed
def generate_email_data(jobs, config, expired=True):
    final_data = []
    for job in jobs:
        queue_name = job['queue']
        queue_config = config[queue_name]
        run_time_limit = convert_time_to_seconds(queue_config['run_time_limit'])
        
        if expired and job['run_time'] >= run_time_limit:
            final_data.append(job)
        elif not expired:
            remainders = [convert_time_to_seconds(f"{r} days") for r in queue_config['remainders']]
            if any(job['run_time'] >= remainder for remainder in remainders):
                final_data.append(job)
    return final_data

# Group data by user
def group_by_user(jobs):
    user_data = {}
    for job in jobs:
        user = job['user']
        if user not in user_data:
            user_data[user] = []
        user_data[user].append(job)
    return user_data

# Create an Excel file with the job data
def create_excel_file(jobs, file_name):
    df = pd.DataFrame(jobs)
    df.to_excel(file_name, index=False)

# Send email with attachment
def send_email(user, data, expired=True):
    subject = "Job Expiry Notification"
    message = "Dear {0},\n\n".format(user)
    if expired:
        message += "The following jobs have expired:\n"
    else:
        message += "The following jobs are about to expire:\n"
    
    # Prepare email body and attachment
    message += "Please find the attached Excel file for details.\n\nRegards,\nJob Monitoring Team"
    file_name = f"jobs_{user}.xlsx"
    create_excel_file(data, file_name)

    # Prepare email
    msg = MIMEMultipart()
    msg['From'] = "your_email@example.com"
    msg['To'] = f"{user}@company.com"
    msg['Subject'] = subject

    # Attach text message
    msg.attach(MIMEText(message, 'plain'))

    # Attach Excel file
    with open(file_name, 'rb') as attachment:
        part = MIMEApplication(attachment.read(), Name=file_name)
        part['Content-Disposition'] = f'attachment; filename="{file_name}"'
        msg.attach(part)

    # Send email (using your mail server configuration)
    try:
        server = smtplib.SMTP('smtp.example.com', 587)  # Replace with your SMTP server
        server.starttls()
        server.login('your_email@example.com', 'your_password')  # Replace with actual credentials
        server.send_message(msg)
        server.quit()
        print(f"Email sent to {user}")
    except Exception as e:
        print(f"Failed to send email to {user}: {e}")

# Log email activity
def log_email(user):
    with open("log.txt", "a") as log_file:
        log_file.write(f"{datetime.now()}: Sent email to {user}\n")

# Main logic
def main():
    config_file = "config.json"  # Path to your config file
    config = load_config(config_file)

    bjobs_output = get_bjobs_output()
    jobs = parse_bjobs_output(bjobs_output)

    already_expired_job_ids, going_to_expire_job_ids = categorize_jobs(jobs, config)

    if already_expired_job_ids:
        final_already_expired_mail_data = generate_email_data(already_expired_job_ids, config, expired=True)
        grouped_expired_data = group_by_user(final_already_expired_mail_data)
        for user, data in grouped_expired_data.items():
            send_email(user, data, expired=True)
            log_email(user)

    if going_to_expire_job_ids:
        final_going_to_expire_mail_data = generate_email_data(going_to_expire_job_ids, config, expired=False)
        grouped_expire_data = group_by_user(final_going_to_expire_mail_data)
        for user, data in grouped_expire_data.items():
            send_email(user, data, expired=False)
            log_email(user)

if __name__ == "__main__":
    main()
