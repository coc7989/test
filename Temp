import re
from flask import Blueprint, request, jsonify, session
from flask_cors import cross_origin

def extract_features(text, vendor):
    pattern = r"(?<=USE_SERVER)\n(?:FEATURE)(\n|.)*?(?=#\s*DAEMON|#-+|#LICENSE KEYS END HERE#)"
    match = re.search(pattern, text, re.MULTILINE)
    if match:
        return match.group()
    else:
        print("No features got extracted")
        return None

def extract_beta_features(text):
    pattern = r"(?<=# LICENSE KEYS END HERE #)(\n|.)*?(?=#+\s*PRODUCT TO FEATURE MAPPING)"
    match = re.search(pattern, text, re.MULTILINE)
    if match:
        return match.group()
    else:
        print("No beta features got extracted")
        return None

def process_uploaded_files(files, vendor):
    uploaded_features_combined = ""
    uploaded_beta_features_combined = ""
    
    for file in files:
        filepath = file.filename
        with open(filepath, 'r', encoding='utf-8') as license_file:
            uploaded_text = license_file.read()
            
            # Extract standard features
            uploaded_features = extract_features(uploaded_text, vendor)
            if not uploaded_features:
                return None, None
            
            uploaded_features_combined += uploaded_features
            
            # Extract beta features if vendor is "cds"
            if vendor == "cds":
                uploaded_beta_features = extract_beta_features(uploaded_text)
                if not uploaded_beta_features:
                    return None, None
                uploaded_beta_features_combined += uploaded_beta_features
    
    return uploaded_features_combined, uploaded_beta_features_combined

upload_bp = Blueprint('upload_bp', __name__)

@upload_bp.route('/upload', methods=["POST"])
@cross_origin()
def upload():
    files = request.files.getlist('files')
    session['Vendor'] = request.form.get('vendor')
    Vendor = session['Vendor']
    
    uploaded_features, uploaded_beta_features = process_uploaded_files(files, Vendor)
    
    if uploaded_features and (Vendor != "cds" or uploaded_beta_features):
        return jsonify({
            "status": "success", 
            "features": uploaded_features, 
            "beta_features": uploaded_beta_features if Vendor == "cds" else None
        })
    else:
        return jsonify({"status": "failure", "message": "File generation failed: No features extracted"}), 400
