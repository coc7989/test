Sure, Iâ€™ll update the code to handle multiple minions, including your newly added minion `lsfued`. I'll modify the code to allow dynamic targeting of multiple minions.

### Updated Flask Backend

The updated Flask application will accept a list of minions to target when sending commands. This will enable you to specify the minions you want to run commands on.

```python
from flask import Flask, request, jsonify
import requests

app = Flask(__name__)

SALT_API_URL = 'https://flamesai:8000'
SALT_API_USER = 'saltapiuser'
SALT_API_PASS = 'yourpassword'

# Function to log in to salt-api and get a token
def get_salt_api_token():
    response = requests.post(f'{SALT_API_URL}/login', json={
        'eauth': 'pam',
        'username': SALT_API_USER,
        'password': SALT_API_PASS
    })
    return response.json().get('return', [{}])[0].get('token')

@app.route('/run-command', methods=['POST'])
def run_command():
    command = request.json.get('command')
    minions = request.json.get('minions')  # List of minions from the frontend

    headers = {'X-Auth-Token': get_salt_api_token()}
    
    # Targeting multiple minions by providing a comma-separated list
    response = requests.post(f'{SALT_API_URL}/minions', json={
        'tgt': ','.join(minions),  # Joins the list of minions with a comma
        'fun': 'cmd.run',
        'arg': command
    }, headers=headers)

    return jsonify(response.json())

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
```

### Updated Frontend

Here is the updated HTML that allows you to dynamically specify the minions to run commands on:

```html
<!DOCTYPE html>
<html>
<head>
    <title>Salt Command Runner</title>
</head>
<body>
    <h2>Run Command on Salt Minions</h2>

    <label for="command">Enter Command:</label>
    <input type="text" id="command" placeholder="Enter command here">
    
    <h3>Select Minions:</h3>
    <label><input type="checkbox" id="minion1" value="fllvflamesai"> fllvflamesai</label>
    <label><input type="checkbox" id="minion2" value="lsfued"> lsfued</label>

    <button onclick="runCommand()">Run Command</button>

    <pre id="output"></pre>

    <script>
        function runCommand() {
            const command = document.getElementById('command').value;
            const minions = [];

            // Get selected minions
            if (document.getElementById('minion1').checked) {
                minions.push(document.getElementById('minion1').value);
            }
            if (document.getElementById('minion2').checked) {
                minions.push(document.getElementById('minion2').value);
            }

            fetch('/run-command', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ command: command, minions: minions })
            })
            .then(response => response.json())
            .then(data => document.getElementById('output').innerText = JSON.stringify(data, null, 2))
            .catch(error => console.error('Error:', error));
        }
    </script>
</body>
</html>
```

### Explanation of Changes

1. **Dynamic Minion Selection**:
   - The frontend has checkboxes for selecting which minions (`fllvflamesai` or `lsfued`) to target.
   - The backend dynamically builds the list of targeted minions and joins them into a comma-separated string to pass to the Salt API.

2. **Live Feedback**:
   - The command output is displayed in the `<pre>` tag for formatted JSON output.

### Next Steps

- **Start Your Flask Server**: Run the updated Flask server to make the changes effective.
- **Open the Frontend Page**: Open the HTML file in your web browser to select minions, enter commands, and execute them.
- **Monitor the Commands**: Check the console or the API responses to monitor the command execution in real-time.

With these updates, you should be able to trigger commands across multiple minions and monitor the output live from your web interface!
