const columns = [
  // { field: 'id', headerName: 'ID', width: 90},
  { field: 'AID', headerName: 'User Id', width: 90, headerClassName: 'header-column' },
  {
    field: 'File',
    headerName: 'File',
    width: 50,
    renderCell: (params) => <FileButton rowId={params.row.id} server={params.row.Server} />,
    disableExport: true,
    headerClassName: 'header-column',
  },
  { field: 'Vendor', headerName: 'Vendor', minWidth: 80, flex: 1, headerClassName: 'header-column' },
  { field: 'Server', headerName: 'Server', minWidth: 230, flex: 1, headerClassName: 'header-column' },
  { field: 'Operation', headerName: 'Operation', minWidth: 100, flex: 1, headerClassName: 'header-column' },
  { field: 'Comments', headerName: 'Comments', minWidth: 250, flex: 1, headerClassName: 'header-column' },
  { field: 'DateTimeStarted', headerName: 'Submitted Time', minWidth: 250, flex: 1, headerClassName: 'header-column' },
  { field: 'DateTimeCompleted', headerName: 'Completed Time', minWidth: 250, flex: 1, headerClassName: 'header-column' },
  { field: 'result', headerName: 'Result', minWidth: 100, flex: 1, headerClassName: 'header-column' }
];





const FileButton = ({ rowId, server }) => {
  // You can now use both rowId and server in this component
  console.log(`Row ID: ${rowId}, Server: ${server}`);

  return (
    <button onClick={() => handleFileButtonClick(rowId, server)}>
      File
    </button>
  );
};

const handleFileButtonClick = (rowId, server) => {
  // Handle the button click, using both rowId and server
  console.log(`Handling file button click for Row ID: ${rowId}, Server: ${server}`);
};
