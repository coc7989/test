pipeline {
    agent any

    environment {
        CONFIG_PATH = '/tmp/groups'
    }

    parameters {
        string(name: 'SLOT_NAME', description: 'Enter the Slot Name')
        string(name: 'USER_ID', description: 'Enter the User ID to be removed')
    }

    stages {
        stage('Set Config File') {
            steps {
                script {
                    // Define CONFIG_FILE_OPTIONS map
                    def CONFIG_FILE_OPTIONS = [
                        '12': 'gui_12slots_grp',
                        '16': 'gui_16slots_grp',
                        '32': 'gui_32slots_grp',
                        '40': 'gui_40slots_grp'
                    ]

                    def slotName = params.SLOT_NAME
                    if (CONFIG_FILE_OPTIONS.containsKey(slotName)) {
                        CONFIG_FILE = "${env.CONFIG_PATH}/${CONFIG_FILE_OPTIONS[slotName]}"
                        echo "Config File selected: ${CONFIG_FILE}"
                    } else {
                        error "Invalid Slot Name: ${slotName}"
                    }
                }
            }
        }

        stage('Remove User ID from All Config Files') {
            steps {
                script {
                    // Define the config file options again for this stage
                    def CONFIG_FILE_OPTIONS = [
                        '12': 'gui_12slots_grp',
                        '16': 'gui_16slots_grp',
                        '32': 'gui_32slots_grp',
                        '40': 'gui_40slots_grp'
                    ]

                    // Loop through all config files and perform operations
                    CONFIG_FILE_OPTIONS.each { key, configFileName ->
                        def configFile = "${env.CONFIG_PATH}/${configFileName}"
                        echo "Processing file: ${configFile}"

                        // Checkout the file before making changes
                        echo "Checking out the file for editing: ${configFile}"
                        sh "co -reserved ${configFile}"  // Updated checkout command

                        // Search and remove user ID from the file if present
                        def grepResult = sh(script: "grep -w '${params.USER_ID}' ${configFile}", returnStatus: true)
                        if (grepResult == 0) {
                            echo "User ID ${params.USER_ID} found in ${configFile}. Removing line..."
                            sh "sed -i '/${params.USER_ID}/d' ${configFile}"
                            echo "User ID ${params.USER_ID} removed from ${configFile}."
                        } else {
                            echo "User ID ${params.USER_ID} not found in ${configFile}."
                        }

                        // Checkin the file after making changes
                        echo "Checking in the file after editing: ${configFile}"
                        sh "ci -c 'Removed user ID ${params.USER_ID}' ${configFile}"  // Updated check-in command
                    }
                }
            }
        }

        stage('Use Config File') {
            steps {
                script {
                    echo "Using Config File: ${CONFIG_FILE}"
                }
            }
        }
    }
}
