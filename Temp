pipeline {
    agent any
    parameters {
        string(defaultValue: '', name: 'BUILD_NUMBER', description: '')
        string(defaultValue: '', name: 'MAPPED_LICENSE', description: '')
        string(defaultValue: '', name: 'VENDOR', description: '')
        string(defaultValue: '', name: 'SERVER_NAME', description: '')
        string(defaultValue: '', name: 'USER_EID', description: '')
    }

    stages {
        stage('Verify File and Execute Commands') {
            steps {
                script {
                    currentBuild.displayName = params.BUILD_NUMBER
                    def vendors = params.VENDOR
                    def servers = params.SERVER_NAME
                    def buildNum = params.BUILD_NUMBER
                    def mappedlicense = params.MAPPED_LICENSE
                    def backupFile = "${mappedlicense}.${buildNum}"
                    
                    // Capture the output of the shell command
                    def output = sh(script: "ssh -tT -o StrictHostKeyChecking=no $servers '/conditional.sh $vendors $mappedlicense $backupFile $buildNum'", returnStdout: true).trim()
                    echo "${output}"
                    
                    // Extract last few lines of the output or specific error message pattern
                    def errorMessage = output.split('\n')[-5..-1].join('\n') // Get the last 5 lines of output for more context

                    def result = "${output.split('\n')[-1]}"
                    
                    if ("$result" == "Success") {
                        echo "Pipeline is successful."
                        currentBuild.result = 'SUCCESS'
                    } else if ("$result" == "Failure") {
                        echo "Failing pipeline."
                        currentBuild.result = 'FAILURE'
                        sh "rsync -v /home/flames/data/history/${backupFile} /home/flames/data/${mappedlicense}"
                    } else {
                        echo "Marking pipeline as unstable."
                        currentBuild.result = 'UNSTABLE'
                        sh "rsync -v /home/flames/data/history/${backupFile} /home/flames/data/${mappedlicense}"
                    }
                }
            }
        }
    }

    post {
        failure {
            script {
                def htmlBody = """
                <html>
                <body>
                    <h2>Build Failure Details</h2>
                    <table border="1" style="border-collapse: collapse; width: 50%;">
                        <tr>
                            <th>Vendor</th>
                            <td>${params.VENDOR}</td>
                        </tr>
                        <tr>
                            <th>Server</th>
                            <td>${params.SERVER_NAME}</td>
                        </tr>
                        <tr>
                            <th>Build Number</th>
                            <td>${params.BUILD_NUMBER}</td>
                        </tr>
                        <tr>
                            <th>Error Message</th>
                            <td><pre>${errorMessage}</pre></td>
                        </tr>
                    </table>
                    <p>Check the console output at <a href="$BUILD_URL">$BUILD_URL</a> to view the full results.</p>
                    
                    <hr style="border:none; border-top:1px solid #ccc;"/>
                    <p style="font-size:14px; color:#333;">For any issues, contact:</p>
                    <p style="font-size:14px; color:#555;">
                        <a href="mailto:Flames@gmail.com">Flames@gmail.com</a>
                    </p>
                    <p style="font-size:14px; color:#333;">For any escalation, contact:</p>
                    <p style="font-size:14px; color:#555;">
                        <a href="mailto:Rajath@gmail.com">Rajath@gmail.com</a>, 
                        <a href="mailto:Chris@gmail.com">Chris@gmail.com</a>
                    </p>
                </body>
                </html>
                """
                
                emailext(
                    mimeType: 'text/html',
                    body: htmlBody,
                    from: "conditional@list.ti.com",
                    to: "flameshub-admin@list.ti.com, ${params.USER_EID}",
                    subject: "Build failed in Jenkins Conditional Pipeline: ${JOB_NAME} #${params.BUILD_NUMBER}"
                )
            }
        }
    }
}
