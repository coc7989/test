Perfect — here's how you can enhance your setup to support multiple REQUEST_STATUS values, including the new ones: ACTIVE_PRIORITY, ACCESS_ENDED, and changing COMPLETED to a broader OTHERS.


---

1. Update Tabs in AdminPanel.js

Update the tab labels and values to reflect the new statuses:

<Tabs
  centered
  value={alignment}
  onChange={(e, newValue) => setAlignment(newValue)}
  textColor="primary"
  indicatorColor="primary"
>
  <Tab sx={{ fontSize: '18px' }} value="PENDING" label="PENDING FOR APPROVAL" />
  <Tab sx={{ fontSize: '18px' }} value="ACTIVE_PRIORITY" label="ACTIVE PRIORITY" />
  <Tab sx={{ fontSize: '18px' }} value="ACCESS_ENDED" label="ACCESS ENDED" />
  <Tab sx={{ fontSize: '18px' }} value="OTHERS" label="OTHERS" />
</Tabs>


---

2. Render Panels for Each Tab

Update your conditional rendering to add more Slide components for the new statuses:

<Grid xs={12} ref={containerRef}>
  {alignment === 'PENDING' && (
    <Slide direction="right" in timeout={200} container={containerRef.current}>
      <Card sx={{ mt: 1 }}>
        <AdminRequestPanel REQUEST_STATUS="PENDING" clusterName={selectedCluster} />
      </Card>
    </Slide>
  )}
  {alignment === 'ACTIVE_PRIORITY' && (
    <Slide direction="left" in timeout={200} container={containerRef.current}>
      <Card sx={{ mt: 1 }}>
        <AdminRequestPanel REQUEST_STATUS="ACTIVE_PRIORITY" clusterName={selectedCluster} />
      </Card>
    </Slide>
  )}
  {alignment === 'ACCESS_ENDED' && (
    <Slide direction="right" in timeout={200} container={containerRef.current}>
      <Card sx={{ mt: 1 }}>
        <AdminRequestPanel REQUEST_STATUS="ACCESS_ENDED" clusterName={selectedCluster} />
      </Card>
    </Slide>
  )}
  {alignment === 'OTHERS' && (
    <Slide direction="left" in timeout={200} container={containerRef.current}>
      <Card sx={{ mt: 1 }}>
        <AdminRequestPanel REQUEST_STATUS="OTHERS" clusterName={selectedCluster} />
      </Card>
    </Slide>
  )}
</Grid>


---

3. Update Backend Logic

Update your /admin_panel_requests endpoint in main.py to handle the new request statuses:

request_status = request.args.get('REQUEST_STATUS')
cluster_name = request.args.get('clusterName')

# Example logic
if request_status == "ACTIVE_PRIORITY":
    result = query_records(status="COMPLETED", cluster=cluster_name, is_priority=True)
elif request_status == "ACCESS_ENDED":
    result = query_records(status="ACCESS_ENDED", cluster=cluster_name)
elif request_status == "OTHERS":
    result = query_records(
        exclude_statuses=["PENDING", "ACTIVE_PRIORITY", "ACCESS_ENDED"],
        cluster=cluster_name
    )
else:
    result = query_records(status=request_status, cluster=cluster_name)

You can define query_records() to use SQLAlchemy or raw SQL depending on your backend.


---

Let me know if you want filtering, sorting, or search on top of this too — or need help with how ACTIVE_PRIORITY is marked in your data.

