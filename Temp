import React, { useEffect, useState } from 'react';
import { Controller, useForm } from 'react-hook-form';
import { TextField, MenuItem, Grid } from '@mui/material';

const SlotForm = () => {
    const { control, watch } = useForm();
    const [config, setConfig] = useState(null);
    const [slotOptions, setSlotOptions] = useState([]);

    // Fetch config.json from Flask backend
    useEffect(() => {
        fetch('http://flask-backend-url:5000/get-config')
            .then(response => response.json())
            .then(data => setConfig(data))
            .catch(error => console.error('Error fetching config:', error));
    }, []);

    // Watch the SLOT_TYPE field to update slot options dynamically
    const slotType = watch('SLOT_TYPE', '');

    useEffect(() => {
        if (config) {
            if (slotType === 'gui') {
                setSlotOptions(Object.keys(config.GUI).map(Number));  // Convert keys to numbers
            } else if (slotType === 'regress') {
                setSlotOptions(Object.keys(config.REGRESS).map(Number)); 
            } else {
                setSlotOptions([]);
            }
        }
    }, [slotType, config]);

    return (
        <Grid container spacing={2}>
            <Grid item xs={12}>
                <Controller
                    name="SLOT_TYPE"
                    control={control}
                    defaultValue=""
                    rules={{ required: 'Slot type is required.' }}
                    render={({ field }) => (
                        <TextField
                            {...field}
                            select
                            label="Slot Type"
                            fullWidth
                            error={!!slotType}
                            helperText={!slotType ? 'Slot type is required.' : ''}
                        >
                            <MenuItem value="gui">GUI Slot</MenuItem>
                            <MenuItem value="regress">Regress Slot</MenuItem>
                        </TextField>
                    )}
                />
            </Grid>

            <Grid item xs={12}>
                <Controller
                    name="REQUESTED_SLOT"
                    control={control}
                    defaultValue=""
                    rules={{ required: 'Slot needed is required.' }}
                    render={({ field }) => (
                        <TextField
                            {...field}
                            select
                            label="Slot Needed"
                            fullWidth
                            error={!slotOptions.length}
                            helperText={!slotOptions.length ? 'Select a slot.' : ''}
                            disabled={!slotOptions.length}
                        >
                            {slotOptions.map(slot => (
                                <MenuItem key={slot} value={slot}>{slot}</MenuItem>
                            ))}
                        </TextField>
                    )}
                />
            </Grid>
        </Grid>
    );
};

export default SlotForm;
