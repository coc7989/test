 slot_queues.yaml — Human-Friendly Config with Admin Notes
yaml
Copy
Edit
# Slot Queue Configuration - Golden Source
# 
# Format:
# <queue_name>:
#   - slots: <number of slots>
#     file: <file name>
# 
# Admin Notes:
# - This file controls available slot queues for the UI.
# - To add a new slot group, add an entry under the queue name.
# - Make sure 'file' matches Jenkins naming conventions.
# - Update Jenkins + UI consumers after making changes.

gui:
  - slots: 12
    file: gui_12_grp
  - slots: 20
    file: gui_20_grp

api:
  - slots: 10
    file: api_10_grp

default:
  - slots: 5
    file: default_5_grp
You can extend this structure as needed — add priorities, types, labels, etc.

🧠 Flask: Loading YAML Config (slot_config.py)
python
Copy
Edit
import yaml
import os

def load_slot_config():
    config_path = os.path.join(os.path.dirname(__file__), '../../config/slot_queues.yaml')

    try:
        with open(config_path, 'r') as f:
            return yaml.safe_load(f)
    except Exception as e:
        # Log error in production
        return {}
🛠️ Usage in a Route (e.g. /api/slot-options)
python
Copy
Edit
from flask import Blueprint, jsonify
from ..utils.slot_config import load_slot_config

slot_bp = Blueprint('slot', __name__)

@slot_bp.route('/slot-options', methods=['GET'])
def get_slot_options():
    config = load_slot_config()
    return jsonify(config)
✅ This gives your React frontend access to live slot config data.

🧪 Jenkins Integration
If you're using Python in Jenkins (or calling shell), just parse this YAML:

python
Copy
Edit
import yaml

with open('backend/config/slot_queues.yaml') as f:
    config = yaml.safe_load(f)

for queue, groups in config.items():
    for group in groups:
        print(f"Queue: {queue}, File: {group['file']}, Slots: {group['slots']}")
Or use Groovy/YAML parser if you're scripting directly in Jenkins pipeline.

✅ Summary

Feature	Done?
Human-readable config	✅ YAML with comments
Easy to parse	✅ via yaml.safe_load()
Reusable in Flask + Jenkins	✅ Absolute path reference
Extensible structure	✅ Add more keys easily
Admin-friendly	✅ Inline notes + structure hints
Want Extras?
🔒 Schema validation using cerberus or pydantic

✍️ Web UI for editing config safely (with auth)

📦 Docker volume mount to keep configs outside app

📈 Slot monitoring dashboard

Just say the word — I’ll build the next level out.





You said:
SO I have a jenkins pipeline so probably I will make a curl call to backend api endpoint to get the configuration file data


ChatGPT said:
Perfect — that’s clean, scalable, and keeps Jenkins loosely coupled from the backend logic. Using a Jenkins pipeline with a curl call to fetch the slot configuration from a Flask API is an excellent approach.

Let’s lock this down properly:

✅ Step-by-Step: Jenkins + Flask API for Config
🧩 Flask API Endpoint (Recap)
Your backend should expose something like:

http
Copy
Edit
GET /api/slot-options
Returns JSON:

json
Copy
Edit
{
  "gui": [
    { "slots": 12, "file": "gui_12_grp" },
    { "slots": 20, "file": "gui_20_grp" }
  ],
  "api": [
    { "slots": 10, "file": "api_10_grp" }
  ]
}
🧪 Jenkinsfile Snippet (Declarative Pipeline)
groovy
Copy
Edit
pipeline {
  agent any

  stages {
    stage('Fetch Slot Config') {
      steps {
        script {
          def response = sh(script: "curl -s http://your-backend-domain/api/slot-options", returnStdout: true).trim()
          def config = readJSON text: response

          echo "Received slot queues:"
          config.each { queueName, groups ->
            echo "Queue: ${queueName}"
            groups.each { group ->
              echo "  -> Slots: ${group.slots}, File: ${group.file}"
            }
          }
        }
      }
    }

    stage('Use Slot Config') {
      steps {
        // Example: trigger jobs or make decisions based on config
      }
    }
  }
}
🛡️ Tips for Real-World Use:

Concern	Solution
🔐 Secure Access	Add API key/token headers to your /api/slot-options endpoint
📦 Backend not public	Run Flask on same host or internal network as Jenkins
🧰 Use in Bash	`curl http://...
📉 Error handling	Add retries or fallback logic in Jenkins if API is down
🔍 Logging	Log every Jenkins call to the backend for traceability
🔐 (Optional) Securing the API Call
Backend (Flask):
python
Copy
Edit
from flask import request, abort

@slot_bp.route('/slot-options', methods=['GET'])
def get_slot_options():
    token = request.headers.get('X-API-TOKEN')
    if token != os.getenv('JENKINS_API_TOKEN'):
        abort(403)

    config = load_slot_config()
    return jsonify(config)
Jenkins:
groovy
Copy
Edit
sh """
  curl -s -H "X-API-TOKEN: ${env.SLOT_CONFIG_TOKEN}" http://your-backend/api/slot-options
"""
✅ Store SLOT_CONFIG_TOKEN securely in Jenkins credentials or env.

✅ Result
With this setup:

🧩 Config stays centralized in Flask/YAML

🔁 Jenkins dynamically fetches latest config every run

🔒 Secure, versioned, and logged

☁️ Future-proof: can add caching, validation, or UI layer on top

Want me to help you:

🔧 Add caching in Flask to avoid loading the YAML every request?

🧪 Add test coverage for the slot config?

🖥️ Design the React dropdown that pulls these queues live?

Let’s keep building this like a boss.





You said:
can you also give me the backend code which jenkins will make api call


ChatGPT said:
Absolutely! Here's a full backend API example in Flask that Jenkins can safely call via curl to get your slot queue config. It includes:

✅ Reading from the slot_queues.yaml

🔐 Optional token-based security for Jenkins

🪵 Logging errors

📄 Clean JSON response format

📁 File Structure Recap
arduino
Copy
Edit
backend/
├── app/
│   ├── __init__.py
│   ├── routes/
│   │   └── slot_api.py
│   ├── utils/
│   │   └── slot_config.py
│   └── logger.py
├── config/
│   └── slot_queues.yaml
├── run.py
├── requirements.txt
└── .env
1. ✅ slot_queues.yaml (example config)
yaml
Copy
Edit
# Slot Queue Configuration for Jenkins & UI

gui:
  - slots: 12
    file: gui_12_grp
  - slots: 20
    file: gui_20_grp

api:
  - slots: 10
    file: api_10_grp
2. 🔧 .env (for optional security token)
env
Copy
Edit
JENKINS_API_TOKEN=my_super_secret_token
3. 🔧 slot_config.py (YAML reader)
python
Copy
Edit
import yaml
import os

def load_slot_config():
    config_path = os.path.join(os.path.dirname(__file__), '../../config/slot_queues.yaml')

    try:
        with open(config_path, 'r') as f:
            return yaml.safe_load(f)
    except Exception as e:
        from app.logger import logger
        logger.error("Failed to load slot_queues.yaml", exc_info=True)
        return {}
4. 📜 slot_api.py (Flask API endpoint)
python
Copy
Edit
from flask import Blueprint, jsonify, request
from ..utils.slot_config import load_slot_config
from ..logger import logger
import os

slot_bp = Blueprint('slot', __name__)

@slot_bp.route('/api/slot-options', methods=['GET'])
def get_slot_options():
    try:
        # Optional security token
        required_token = os.getenv('JENKINS_API_TOKEN')
        if required_token:
            provided_token = request.headers.get('X-API-TOKEN')
            if provided_token != required_token:
                logger.warning("Unauthorized access attempt to /api/slot-options")
                return jsonify({"error": "Unauthorized"}), 403

        config = load_slot_config()
        return jsonify(config), 200

    except Exception as e:
        logger.error("Error in /api/slot-options", exc_info=True)
        return jsonify({"error": "Internal server error"}), 500
5. 🧩 __init__.py (register the blueprint)
python
Copy
Edit
from flask import Flask
from .logger import setup_logger
from .routes.slot_api import slot_bp

logger = setup_logger()

def create_app():
    app = Flask(__name__)
    app.register_blueprint(slot_bp)
    return app
6. 🪵 logger.py
python
Copy
Edit
import logging
from logging.handlers import RotatingFileHandler
import os

def setup_logger():
    logger = logging.getLogger("app")
    logger.setLevel(logging.INFO)

    log_file = os.path.join(os.getcwd(), 'logs/app.log')
    os.makedirs(os.path.dirname(log_file), exist_ok=True)

    handler = RotatingFileHandler(log_file, maxBytes=1000000, backupCount=3)
    formatter = logging.Formatter('%(asctime)s | %(levelname)s | %(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)

    return logger
7. 🚀 run.py
python
Copy
Edit
from app import create_app

app = create_app()

if __name__ == '__main__':
    app.run(debug=False, host='0.0.0.0', port=5000)
✅ Jenkins CURL Example
bash
Copy
Edit
curl -s -H "X-API-TOKEN: my_super_secret_token" http://your-server:5000/api/slot-options
This will return:

json
Copy
Edit
{
  "gui": [
    { "slots": 12, "file": "gui_12_grp" },
    { "slots": 20, "file": "gui_20_grp" }
  ],
  "api": [
    { "slots": 10, "file": "api_10_grp" }
  ]
}
