To achieve what you're looking for — triggering SaltStack commands from a web interface and monitoring their execution in real-time — you can leverage SaltStack's REST API (`salt-api`) along with a web application backend. Here’s a step-by-step guide on how to set this up:

### Step 1: Set Up `salt-api`

1. **Install `salt-api` on your master server (`flamesai`)**:
   If not already installed, you need to set up `salt-api` on your Salt master. 

   ```bash
   sudo apt-get install salt-api
   ```

2. **Configure the Salt Master to Use `salt-api`**:
   Open your Salt master configuration file (`/etc/salt/master`) and add the following:

   ```yaml
   rest_cherrypy:
     port: 8000  # Port for the REST API, can be changed as needed
     ssl_crt: /etc/pki/tls/certs/localhost.crt  # Path to your SSL certificate
     ssl_key: /etc/pki/tls/certs/localhost.key  # Path to your SSL key
   ```

   Ensure that the paths to your SSL certificate and key are correct. If you don't have SSL certificates, you may need to create them or use self-signed ones.

3. **Create a User for `salt-api`**:
   Create a user in the `/etc/salt/master` configuration file with the necessary permissions. Add the following lines:

   ```yaml
   external_auth:
     pam:
       saltapiuser:
         - .*
         - '@wheel'
         - '@runner'
         - '@jobs'
   ```

   Replace `saltapiuser` with a username of your choice.

4. **Restart the Salt Master**:
   Restart the Salt Master and Salt API to apply these changes.

   ```bash
   sudo systemctl restart salt-master
   sudo systemctl restart salt-api
   ```

### Step 2: Create a Web Application

1. **Backend Web Application**:
   Create a backend service using a framework like Flask, Django, or Node.js. This backend will handle incoming HTTP requests from your web client and forward them to the Salt API.

   Here's an example of a Flask application that sends a command to the Salt API:

   ```python
   from flask import Flask, request, jsonify
   import requests

   app = Flask(__name__)

   SALT_API_URL = 'https://flamesai:8000'
   SALT_API_USER = 'saltapiuser'
   SALT_API_PASS = 'yourpassword'
   SALT_TARGET = 'fllvflamesai'

   # Function to login to salt-api and get a token
   def get_salt_api_token():
       response = requests.post(f'{SALT_API_URL}/login', json={
           'eauth': 'pam',
           'username': SALT_API_USER,
           'password': SALT_API_PASS
       })
       return response.json().get('return', [{}])[0].get('token')

   @app.route('/run-command', methods=['POST'])
   def run_command():
       command = request.json.get('command')
       headers = {'X-Auth-Token': get_salt_api_token()}
       response = requests.post(f'{SALT_API_URL}/minions', json={
           'tgt': SALT_TARGET,
           'fun': 'cmd.run',
           'arg': command
       }, headers=headers)
       return jsonify(response.json())

   if __name__ == '__main__':
       app.run(host='0.0.0.0', port=5000)
   ```

   This Flask app exposes a `/run-command` endpoint that takes a `POST` request with a command to run on the minion `fllvflamesai`.

2. **Frontend Web Application**:
   Create a simple HTML page with a button to send commands to the Flask backend.

   ```html
   <!DOCTYPE html>
   <html>
   <head>
       <title>Salt Command Runner</title>
   </head>
   <body>
       <button id="run-command" onclick="runCommand()">Run Command</button>

       <script>
           function runCommand() {
               fetch('/run-command', {
                   method: 'POST',
                   headers: {
                       'Content-Type': 'application/json'
                   },
                   body: JSON.stringify({ command: 'your-command-here' })
               })
               .then(response => response.json())
               .then(data => console.log(data))
               .catch(error => console.error('Error:', error));
           }
       </script>
   </body>
   </html>
   ```

3. **Monitor Execution in Real-Time**:
   To monitor command execution in real-time, you can use WebSockets or Server-Sent Events (SSE) on the backend (e.g., Flask-SocketIO) to stream logs to the web interface.

   Additionally, Salt has an event bus that can be monitored using `salt-run` or `salt.utils.event`. You can subscribe to events related to job execution and then forward them to the web client.

### Step 3: Enable Event Stream for Real-Time Updates

1. **Set Up Event Listener on the Master**:
   You can set up a Python script on the master server to listen to Salt events and send them to the web client via WebSockets.

2. **Stream Events to Web Client**:
   Using WebSockets or SSE, stream these events to the frontend to display real-time logs.

By following these steps, you'll be able to trigger SaltStack commands via a web interface and monitor them in real-time.
