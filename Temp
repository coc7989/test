import { ClusterContext } from '../../../NotificationContext';
const QueueRequestForm = () => {
  const { userID, selectedCluster } = useContext(ClusterContext);
  const {
    control,
    handleSubmit,
    reset,
    watch,
    unregister,
    setValue,
    formState: { errors },
  } = useForm({
    shouldUnregister: true,
    mode: 'onChange',
    defaultValues: {
      QUEUE: '',
      CLUSTER_NAME: '',
    },
  });

  const [openSnackbar, setOpenSnackbar] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [snackbarSeverity, setSnackbarSeverity] = useState('success');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [openDialog, setOpenDialog] = useState(false);

  const today = dayjs();

  const handleClusterChange = (e, field) => {
    field.onChange(e);
    setValue('QUEUE', '');
  };

  const handleQueueChange = (e, field) => {
    field.onChange(e);
    if (e.target.value === 'hwsim' && watch('CLUSTER_NAME') === 'dal-design') {
      setOpenDialog(true);
    }
  };

  const handleDialogClose = () => {
    setOpenDialog(false);
  };

  const handleSnackbarClose = (event, reason) => {
    if (reason === 'clickaway') {
      return;
    }
    setOpenSnackbar(false);
  };

  const onSubmit = async (data) => {
    setIsSubmitting(true);
    
    // Set LSB_OPTION based on CLUSTER_NAME
    data.LSB_OPTION = data.CLUSTER_NAME === 'dal-design';

    data.REQUEST_STATUS = 'PENDING';
    data.USER_AID = userID;
    data.SUBMISSION_DATE = today.format('YYYY-MM-DD');

    try {
      const response = await apiInstance.post('/queue_request', data);
      if (response.status === 200) {
        setSnackbarSeverity('success');
        setSnackbarMessage('Request submitted successfully!');
        setOpenSnackbar(true);
        reset();
      }
    } catch (error) {
      console.error('Submission failed:', error);
      setSnackbarSeverity('error');
      setSnackbarMessage('Failed to submit request. Please try again.');
      setOpenSnackbar(true);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <>
      <Paper elevation={24} square={false}>
        <form onSubmit={handleSubmit(onSubmit)} noValidate>
          <Grid container spacing={2} justifyContent="center" alignItems="center">
            
            {/* Cluster Name */}
            <Grid item xs={12} md={6}>
              <FormControl fullWidth variant="outlined" error={Boolean(errors.CLUSTER_NAME)}>
                <InputLabel>Select Cluster</InputLabel>
                <Controller
                  name="CLUSTER_NAME"
                  control={control}
                  rules={{ required: 'Cluster Name is required' }}
                  render={({ field, fieldState }) => (
                    <>
                      <Select
                        {...field}
                        label="Select Cluster"
                        onChange={(e) => handleClusterChange(e, field)}
                      >
                        <MenuItem value={"tii-shared"}>India (tii-shared)</MenuItem>
                        <MenuItem value={"dal-design"}>Dallas (dal-design)</MenuItem>
                        <MenuItem value={"cdc-design"}>China (cdc-design)</MenuItem>
                        <MenuItem value={"tid"}>Freising (tid)</MenuItem>
                      </Select>
                      {fieldState.error && <FormHelperText>{fieldState.error.message}</FormHelperText>}
                    </>
                  )}
                />
              </FormControl>
            </Grid>

            {/* Queue */}
            <Grid item xs={12} md={6}>
              <FormControl fullWidth variant="outlined" error={Boolean(errors.QUEUE)}>
                <InputLabel>Queue</InputLabel>
                <Controller
                  name="QUEUE"
                  control={control}
                  rules={{ required: 'Queue is required' }}
                  render={({ field, fieldState }) => (
                    <>
                      <Select
                        {...field}
                        label="Queue"
                        disabled={!watch('CLUSTER_NAME')}  // Disable until cluster is selected
                        onChange={(e) => handleQueueChange(e, field)}
                      >
                        <MenuItem value="priority">Priority</MenuItem>
                        {['tii-shared', 'dal-design'].includes(watch('CLUSTER_NAME')) && (
                          <MenuItem value="hwsim">HwSim</MenuItem>
                        )}
                      </Select>
                      {fieldState.error && <FormHelperText>{fieldState.error.message}</FormHelperText>}
                    </>
                  )}
                />
              </FormControl>
            </Grid>

            {/* Slot Pool (conditional rendering) */}
            {watch('CLUSTER_NAME') === 'dal-design' && watch('QUEUE') === 'priority' && (
              <Grid item xs={12} md={6}>
                <Controller
                  name="SLOT_POOL"
                  control={control}
                  defaultValue={50}
                  render={({ field }) => (
                    <TextField
                      {...field}
                      label="Slot Pool"
                      placeholder="Enter Slot Pool"
                      variant="outlined"
                      fullWidth
                    />
                  )}
                />
              </Grid>
            )}

            {/* PG Date */}
            {watch('QUEUE') === 'priority' && (
              <Grid item xs={12} md={6}>
                <FormControl fullWidth variant="outlined" error={Boolean(errors.PG_DATE)}>
                  <Controller
                    name="PG_DATE"
                    control={control}
                    rules={{ required: 'PG Date is required' }}
                    defaultValue={today}
                    render={({ field, fieldState }) => (
                      <>
                        <DatePicker
                          {...field}
                          label="PG / Major Commitment Date *"
                          placeholder="Select Date"
                          disablePast
                          defaultValue={today}
                          error={!!errors?.PG_DATE}
                          helperText={errors?.PG_DATE?.message}
                        />
                        {fieldState.error && <FormHelperText>{fieldState.error.message}</FormHelperText>}
                      </>
                    )}
                  />
                </FormControl>
              </Grid>
            )}
          </Grid>

          <Stack spacing={2} direction="row" justifyContent="center" p={2}>
            <Button type="submit" variant="contained" color="primary">Submit</Button>
            <Button type="button" variant="contained" color="primary" onClick={() => reset()}>Reset</Button>
          </Stack>
        </form>

        <Backdrop open={isSubmitting} sx={{ color: "#fff", zIndex: (theme) => theme.zIndex.drawer + 1 }}>
          <CircularProgress color="inherit" />
          <Typography variant="h6" sx={{ marginLeft: 2 }}>Submitting...</Typography>
        </Backdrop>

        <SnackbarAlert
          open={openSnackbar}
          handleClose={handleSnackbarClose}
          message={snackbarMessage}
          severity={snackbarSeverity}
        />

        <Dialog open={openDialog} onClose={handleDialogClose}>
          <DialogTitle>Notice</DialogTitle>
          <DialogContent>
            Please use Palladium Box for HwSim access. Use -R "select[ws80 && palladium]" while submitting jobs.
          </DialogContent>
          <DialogActions>
            <Button onClick={handleDialogClose}>OK</Button>
          </DialogActions>
        </Dialog>

        <DevTool control={control} />
      </Paper>
    </>
  );
};

export default QueueRequestForm;
