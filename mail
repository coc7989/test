import React, { useContext, useEffect, useMemo, useState } from 'react';
import MaterialReactTable from 'material-react-table';
import {
  Box,
  Typography,
  TextField,
  Button,
  Backdrop,
  CircularProgress,
} from '@mui/material';
import { useQuery, useMutation } from '@tanstack/react-query';
import dayjs from 'dayjs';
import apiInstance from '../../../api';
import { ClusterContext } from '../../../NotificationContext';

const SuperAdminRequestPanel = ({ REQUEST }) => {
  const { userID } = useContext(ClusterContext);
  const [open, setOpen] = useState(false);
  const [editData, setEditData] = useState({});

  const fetchAccessRequests = async (userID, REQUEST) => {
    const res = await apiInstance.get(
      `/super_admin_panel_requests?userID=${userID}&REQUEST=${REQUEST}`
    );
    return res.data || {};
  };

  const {
    data,
    isLoading,
    refetch,
  } = useQuery(['accessRequests', userID, REQUEST], () =>
    fetchAccessRequests(userID, REQUEST)
  );

  useEffect(() => {
    refetch();
  }, []);

  const mutation = useMutation(
    async ({ REQUEST_ID, ACCESS_END_DATE }) => {
      return apiInstance.post('/update_access_end_date', {
        REQUEST_ID,
        ACCESS_END_DATE,
      });
    },
    {
      onSuccess: () => {
        setOpen(false);
        alert('Data updated successfully!');
        refetch();
      },
      onError: () => {
        setOpen(false);
        alert('Error updating data!');
      },
    }
  );

  const handleDateChange = (REQUEST_ID, newDate) => {
    setEditData((prev) => ({ ...prev, [REQUEST_ID]: newDate }));
  };

  const handleSave = (REQUEST_ID) => {
    const ACCESS_END_DATE = editData[REQUEST_ID];
    if (ACCESS_END_DATE) {
      setOpen(true);
      mutation.mutate({ REQUEST_ID, ACCESS_END_DATE });
    }
  };

  const COLUMNS = useMemo(
    () => [
      {
        accessorKey: 'REQUEST_ID',
        header: 'REQUEST ID',
        size: 90,
      },
      {
        accessorKey: 'USER_AID',
        header: 'AID',
        size: 140,
      },
      {
        accessorKey: 'QUEUE',
        header: 'QUEUE',
        size: 150,
        Cell: ({ cell }) => (
          <Typography>
            {cell.getValue().charAt(0).toUpperCase() +
              cell.getValue().slice(1)}
          </Typography>
        ),
      },
      {
        accessorKey: 'REQUEST_STATUS',
        header: 'REQUEST STATUS',
        size: 150,
      },
      {
        accessorKey: 'ACCESS_END_DATE',
        header: 'Access End Date',
        size: 150,
        Cell: ({ cell }) => {
          const REQUEST_ID = cell.row.original.REQUEST_ID;
          const value = cell.getValue();
          return REQUEST === 'EDITABLE' ? (
            <>
              <TextField
                type="date"
                value={editData[REQUEST_ID] || dayjs(value).format('YYYY-MM-DD')}
                onChange={(e) =>
                  handleDateChange(REQUEST_ID, e.target.value)
                }
                size="small"
              />
              <Button
                variant="contained"
                size="small"
                onClick={() => handleSave(REQUEST_ID)}
                style={{ marginLeft: '10px' }}
              >
                Save
              </Button>
            </>
          ) : (
            <span>{dayjs(value).format('DD-MMM-YYYY')}</span>
          );
        },
      },
    ],
    [REQUEST, editData]
  );

  return (
    <>
      <Backdrop open={open}>
        <CircularProgress />
      </Backdrop>
      <MaterialReactTable
        columns={COLUMNS}
        data={data || []}
        state={{
          showProgressBars: isLoading,
        }}
        positionToolbarAlertBanner="top"
        enableColumnResizing
        enableStickyHeader
        enableStickyFooter
      />
    </>
  );
};

export default SuperAdminRequestPanel;
