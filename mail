To implement the removal logic for both config_file_path and lsb_resources_file_path, you can add stages similar to the append logic, tailored to the described requirements. Below is an updated script with the removal functionality:

Removal Logic Script

stage('Remove ID from Config File') {
    steps {
        script {
            echo "----------------Remove ID from Config File----------------"
            try {
                def groupAids = params.GROUP_AID.split(',').collect { it.trim() }
                def userId = params.USER_ID.trim()

                if (!groupAids.isEmpty() && params.GROUP_AID.trim()) {
                    // Remove all occurrences of group AIDs
                    groupAids.each { aid ->
                        sh "sed -i '/${aid}/d' ${config_file_path}"
                    }
                    echo "Group AIDs removed from ${config_file_path}."
                } else if (userId) {
                    // Remove all occurrences of the user ID
                    sh "sed -i '/${userId}/d' ${config_file_path}"
                    echo "User ID removed from ${config_file_path}."
                } else {
                    error "No valid GROUP_AID or USER_ID provided for removal."
                }
            } catch (Exception e) {
                check_in_file_on_failure(config_file_path)
                if (params.LSB_OPTION) {
                    check_in_file_on_failure(lsb_resources_file_path)
                }
                setFail()
                error "Failed to remove ID from config file: ${e.message}"
            }
        }
    }
}

stage('Remove ID from lsb resources file (if applicable)') {
    when {
        expression { return params.LSB_OPTION }
    }
    steps {
        script {
            echo "----------------Remove ID from lsb resources file----------------"
            try {
                def groupAids = params.GROUP_AID.split(',').collect { it.trim() }
                def slaPool = params.SLOT_POOL ?: env.DEFAULT_SLOT_POOL

                if (!groupAids.isEmpty() && params.GROUP_AID.trim()) {
                    // Prepare formatted entries for removal
                    def entriesToRemove = groupAids.collect { aid -> "(${aid}) - ${slaPool}" }
                    echo "Entries to remove from LSB file: ${entriesToRemove}"

                    def content = readFile(file: lsb_resources_file_path)
                    def startMarker = "#Begin Of MYLSF Automation"
                    def endMarker = "#End Of MYLSF Automation"

                    if (content.contains(startMarker) && content.contains(endMarker)) {
                        def beforeBegin = content.substring(0, content.indexOf(startMarker) + startMarker.length() + 1)
                        def afterEnd = content.substring(content.indexOf(endMarker))
                        def middleSectionStart = content.indexOf(startMarker) + startMarker.length()
                        def middleSectionEnd = content.indexOf(endMarker)
                        def middleSection = content.substring(middleSectionStart, middleSectionEnd).trim()

                        // Remove entries from the middle section
                        def updatedMiddleSection = middleSection
                        entriesToRemove.each { entry ->
                            updatedMiddleSection = updatedMiddleSection.replaceAll("(?m)^${entry}\\s*\$", "")
                        }

                        // Combine all parts
                        def updatedContent = beforeBegin + updatedMiddleSection.trim() + "\n" + afterEnd
                        writeFile(file: lsb_resources_file_path, text: updatedContent)
                        echo "LSB resources file ${lsb_resources_file_path} updated successfully."
                    } else {
                        error "Delimiters not found in ${lsb_resources_file_path}."
                    }
                } else {
                    error "No valid GROUP_AID provided for removal in LSB file."
                }
            } catch (Exception e) {
                restore_backup_file(config_backup_file_name, config_filename)
                check_in_file_on_failure(config_file_path)
                if (params.LSB_OPTION) {
                    check_in_file_on_failure(lsb_resources_file_path)
                }
                setFail()
                error "Failed to remove ID from lsb resources file: ${e.message}"
            }
        }
    }
}

Explanation of Changes:

1. Config File Removal:

If GROUP_AID is provided, iterate through its values and remove occurrences from the file using sed.

If GROUP_AID is not provided, use USER_ID to remove its occurrences.

Error handling for missing input values.



2. LSB File Removal:

Look for the #Begin Of MYLSF Automation and #End Of MYLSF Automation delimiters.

Remove entries in the format (${groupAids}) - ${slaPool} from the middle section.

Combine the sections and write back the updated content.



3. General Updates:

Enhanced error handling and validation.

Trimmed inputs to prevent whitespace issues.




This script ensures that both config_file_path and lsb_resources_file_path are updated correctly based on the removal requirements.

