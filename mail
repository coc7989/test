To make PLM_AID follow similar logic as GROUP_AID but restrict selection to only one value, you can use the Autocomplete component without the multiple prop. Below is the updated implementation:

Updated Code

const [selectedPLMItem, setSelectedPLMItem] = useState(null); // For single selection
const [selectedGroupItems, setSelectedGroupItems] = useState([]); // For multiple selections
const [inputValue, setInputValue] = useState('');
const [debouncedInputValue, setDebouncedInputValue] = useDebounce(inputValue, 1000);

const handlePLMSelectionChange = (e, value) => {
  setSelectedPLMItem(value); // Single value for PLM_AID
  setValue('PLM_AID', value); // Update the form value
  console.log(value, 'PLM_AID onChange');
};

const handleGroupSelectionChange = (e, value) => {
  setSelectedGroupItems(value); // Multiple values for GROUP_AID
  setValue('GROUP_AID', value); // Update the form value
  console.log(value, 'GROUP_AID onChange');
};

const fetchLDAP = async (inputValue) => {
  const res = await apiInstance.get(`/ldap?userInput=${inputValue}`);
  return res.data || {};
};

const isQueryEnabled = !!debouncedInputValue.trim();
const { data: ldapData = [], isLoading: queryLoading } = useQuery(
  ['ldap', debouncedInputValue],
  () => fetchLDAP(debouncedInputValue),
  {
    enabled: isQueryEnabled,
  }
);

const isLoading = isQueryEnabled && queryLoading;

return (
  <>
    {/* PLM_AID Field (Single Selection) */}
    <Grid item md={6}>
      <FormControl fullWidth variant="outlined">
        <Controller
          name="PLM_AID"
          control={control}
          rules={{
            required: 'PLM AID is required',
            pattern: {
              value: /^[aA]\d{7}$/, // Regex pattern for AID only
              message: 'Please enter a valid AID.',
            },
          }}
          defaultValue={null}
          render={({ field }) => (
            <Autocomplete
              {...field}
              id="PLM_AID"
              loading={isLoading}
              loadingText={'Searching ...'}
              options={ldapData || []}
              getOptionLabel={(option) => `${option.cn} (${option.uid})`}
              onChange={(e, value) => {
                handlePLMSelectionChange(e, value);
              }}
              value={selectedPLMItem}
              isOptionEqualToValue={(option, value) => option.uid === value?.uid}
              filterOptions={(x) => x}
              renderInput={(params) => (
                <TextField
                  {...params}
                  onChange={(e) => setInputValue(e.target.value)}
                  label="Enter PLM AID"
                  placeholder="Enter PLM AID"
                  InputProps={{
                    ...params.InputProps,
                    endAdornment: (
                      <>
                        {isLoading ? <CircularProgress color="inherit" size={20} /> : null}
                        {params.InputProps.endAdornment}
                      </>
                    ),
                  }}
                  error={!!errors.PLM_AID}
                  helperText={errors?.PLM_AID?.message}
                />
              )}
            />
          )}
        />
      </FormControl>
    </Grid>

    {/* GROUP_AID Field (Multiple Selection) */}
    <Grid item md={12}>
      <FormControl fullWidth variant="outlined">
        <Controller
          name="GROUP_AID"
          control={control}
          render={({ field }) => (
            <Autocomplete
              {...field}
              multiple
              id="GROUP_AID"
              disableCloseOnSelect
              loading={isLoading}
              loadingText={'Searching ...'}
              options={ldapData || []}
              getOptionLabel={(option) => `${option.cn} (${option.uid})`}
              onChange={(e, value) => {
                handleGroupSelectionChange(e, value);
              }}
              value={selectedGroupItems}
              isOptionEqualToValue={(option, value) => option.uid === value?.uid}
              filterOptions={(x) => x}
              renderInput={(params) => (
                <TextField
                  {...params}
                  onChange={(e) => setInputValue(e.target.value)}
                  label="Enter Other AIDs"
                  placeholder="Group AIDs"
                  InputProps={{
                    ...params.InputProps,
                    endAdornment: (
                      <>
                        {isLoading ? <CircularProgress color="inherit" size={20} /> : null}
                        {params.InputProps.endAdornment}
                      </>
                    ),
                  }}
                />
              )}
            />
          )}
        />
      </FormControl>
    </Grid>
  </>
);

Key Changes

1. PLM_AID:

Removed multiple prop from Autocomplete.

Managed selection with selectedPLMItem state.

Handled single selection in handlePLMSelectionChange.



2. GROUP_AID:

Kept multiple prop for allowing multiple selections.

Used selectedGroupItems state to manage the array of selected values.



3. Common:

Both fields use the same fetchLDAP logic to retrieve LDAP data based on user input.




