To meet your updated requirements, here’s what needs to change:


---

1. Frontend Update (send full row data in mutation)

Modify handleSaveStatus to pass the entire row:

const handleSaveStatus = (REQUEST_ID, CATEGORY_NAME) => {
  const row = tableData.find((row) => row.REQUEST_ID === REQUEST_ID); // Make sure tableData is accessible
  const REQUEST_STATUS = editData[REQUEST_ID]?.REQUEST_STATUS;

  if (REQUEST_STATUS && row) {
    setOpen(true);
    mutationStatus.mutate({ ...row, REQUEST_STATUS }); // Send full row + updated status
  }
};

Make sure tableData (your fetched table) is accessible in the scope.

Update useMutation accordingly:

const mutationStatus = useMutation(
  async (rowData) => {
    const response = await apiInstance.put('/super_admin_panel_requests', rowData);
    return response;
  },
  {
    onSuccess: async () => {
      await refetch();
      setOpen(false);
      setSeverity('success');
      setAlert('Data updated successfully!');
      setSnackbarOpen(true);
    },
    onError: () => {
      setOpen(false);
      setSeverity('error');
      setAlert('Error updating data!');
      setSnackbarOpen(true);
    },
  }
);


---

2. Backend Update (use full row and send email if status is "COMPLETED")

In your Flask route, do the following inside PUT:

Extract the full row data.

Perform the DB update.

If status is "COMPLETED", call an email function with request_status and the row.


Update the PUT block as:

if request.method == 'PUT':
    data = request.get_json()
    print("data", data)

    request_id = data.get('REQUEST_ID')
    request_status = data.get('REQUEST_STATUS')
    category_name = data.get('CATEGORY_NAME')

    if not request_id or not request_status:
        return jsonify({'error': 'REQUEST_ID and REQUEST_STATUS are required'}), 500

    db = get_db()
    cursor = db.cursor()

    try:
        if category_name == "QUEUE":
            table_name = dbCfg['QUEUE_ACCESS']
        elif category_name == "SLOT":
            table_name = dbCfg['SLOT_REQUEST']
        else:
            return jsonify({'error': 'Invalid CATEGORY_NAME'}), 500

        update_query_status = f"""
            UPDATE {table_name}
            SET REQUEST_STATUS = :request_status
            WHERE REQUEST_ID = :request_id
        """
        cursor.execute(update_query_status, {
            'request_status': request_status,
            'request_id': request_id
        })

        db.commit()
        cursor.close()

        # Send email if status is COMPLETED
        if request_status.upper() == "COMPLETED":
            send_completion_email(data, request_status)  # You’ll define this later

        return jsonify({'message': 'Data updated successfully'}), 200

    except cx_Oracle.DatabaseError as e:
        error, = e.args
        print("error", f"Database error: {error.message}")
        return jsonify({'error': f"Database error: {error.message}"}), 500
    except Exception as e:
        print("error", str(e))
        return jsonify({'error': str(e)}), 500


---

3. Next Step

When you're ready, just tell me what logic and fields the send_completion_email(row_data, request_status) function should use, and I’ll help you implement it.

Would you like to define that mail function now?

