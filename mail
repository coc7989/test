Here are 15 Git interview questions with concise, clear answers that cover beginner to intermediate topics. These are great for assessing candidates in any SRE, DevOps, or development role.


---

üõ†Ô∏è Git Interview Questions & Answers

Question	Answer

1. What is Git?	Git is a distributed version control system used to track changes in source code during software development.
2. What is the difference between Git and GitHub?	Git is the tool for version control; GitHub is a web-based platform for hosting Git repositories.
3. How do you check the current branch?	git branch shows all branches and highlights the current one.
4. What does git status do?	It shows the state of the working directory and staging area.
5. What is the difference between git pull and git fetch?	git pull fetches and merges changes, git fetch only downloads them.
6. How do you stage and commit changes?	Use git add <file> to stage, and git commit -m "message" to commit.
7. How do you discard uncommitted changes?	Use git checkout -- <file> to discard changes in the working directory.
8. How do you undo the last commit?	Use git reset --soft HEAD~1 to undo but keep changes staged.
9. What is a merge conflict and how do you resolve it?	A merge conflict happens when changes in different branches affect the same line(s). Manually edit the file, then git add and git commit.
10. What is the difference between git merge and git rebase?	git merge combines histories with a merge commit; git rebase rewrites history to create a linear timeline.
11. How do you create a new branch and switch to it?	git checkout -b <branch-name> creates and switches to the new branch.
12. How do you delete a branch?	git branch -d <branch> deletes a local branch. Use -D to force delete.
13. What is .gitignore used for?	To specify files/folders Git should ignore (e.g., logs, node_modules).
14. How do you view commit history?	Use git log to see commits with hash, author, date, and message.
15. What is a detached HEAD state in Git?	When HEAD points to a commit instead of a branch, often after checking out a past commit directly.



---

Would you like some advanced Git questions (e.g., about cherry-pick, reflog, bisect, submodules)?

