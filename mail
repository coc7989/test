import React, { useContext, useEffect, useState } from 'react';
import { Navigate, Routes, Route } from 'react-router-dom';
import DashboardLayout from './layouts/dashboard';
import { ClusterContext } from './NotificationContext';
import DashboardAppPage from './pages/DashboardAppPage';
import AdminDashboard from './pages/AdminDashboard';
import LoginPage from './pages/LoginPage';
import SimpleLayout from './layouts/SimpleLayout';
import Page404 from './pages/Page404';
import QueueAccessForm from './pages/QueueAccessForm';
import SlotRequest from './pages/SlotRequest';
import AdminQueue from './pages/AdminQueue';
import QueryBuild from './pages/QueryBuild';
import Auto from './pages/Auto';

export default function Router() {
  const { userID } = useContext(ClusterContext);
  const [isAdmin, setIsAdmin] = useState(null); // `null` indicates the check is not complete

  useEffect(() => {
    const checkAdminStatus = async () => {
      try {
        const response = await fetch(`/api/check-admin/${userID}`);
        const data = await response.json();
        setIsAdmin(data.isAdmin);
      } catch (error) {
        console.error('Error checking admin status:', error);
        setIsAdmin(false); // Fallback to non-admin if error occurs
      }
    };

    if (userID) {
      checkAdminStatus();
    }
  }, [userID]);

  // Show a loading state until the admin check is complete
  if (isAdmin === null) {
    return <div>Loading...</div>;
  }

  return (
    <Routes>
      {/* Main Dashboard Layout */}
      <Route path="/" element={<DashboardLayout />}>
        {/* Default route */}
        <Route
          index
          element={isAdmin ? <AdminDashboard /> : <DashboardAppPage />}
        />

        {/* Other routes */}
        <Route path="/access" element={<QueueAccessForm />} />
        <Route path="/slot" element={<SlotRequest />} />
        <Route path="/adminqueue" element={<AdminQueue />} />
        <Route path="/query" element={<QueryBuild />} />
        <Route path="/demo" element={<Auto />} />

        {/* 404 Fallback */}
        <Route path="*" element={<Page404 />} />
      </Route>
    </Routes>
  );
}
