Absolutely! Here's a fresh set of 15 additional scenario-based SQL questions with answers. These are great for evaluating a candidateâ€™s problem-solving skills using real-world database situations. These build slightly on the basics but remain approachable.


---

ðŸ§  More Scenario-Based SQL Questions (With Answers)


---

1. Scenario:

Find the customer(s) who placed the highest number of orders.

Answer:

SELECT customer_id, COUNT(*) AS order_count
FROM orders
GROUP BY customer_id
ORDER BY order_count DESC
LIMIT 1;


---

2. Scenario:

List all products that were ordered more than 100 times in total.

Answer:

SELECT product_id, SUM(quantity) AS total_ordered
FROM order_items
GROUP BY product_id
HAVING SUM(quantity) > 100;


---

3. Scenario:

Show each employee's name along with their manager's name (assume self-join on employees table with manager_id column).

Answer:

SELECT e.name AS employee_name, m.name AS manager_name
FROM employees e
LEFT JOIN employees m ON e.manager_id = m.employee_id;


---

4. Scenario:

You need to return the most recent order for each customer.

Answer:

SELECT o.*
FROM orders o
JOIN (
    SELECT customer_id, MAX(order_date) AS latest_order
    FROM orders
    GROUP BY customer_id
) latest ON o.customer_id = latest.customer_id AND o.order_date = latest.latest_order;


---

5. Scenario:

Find products with a price higher than the average product price.

Answer:

SELECT product_id, product_name, price
FROM products
WHERE price > (SELECT AVG(price) FROM products);


---

6. Scenario:

Retrieve the total revenue generated by each customer.

Answer:

SELECT o.customer_id, SUM(oi.quantity * oi.price) AS total_spent
FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY o.customer_id;


---

7. Scenario:

Find the total number of orders placed in each month.

Answer:

SELECT DATE_FORMAT(order_date, '%Y-%m') AS month, COUNT(*) AS total_orders
FROM orders
GROUP BY month
ORDER BY month;

(Use TO_CHAR(order_date, 'YYYY-MM') in PostgreSQL.)


---

8. Scenario:

List the names of customers who have placed at least two orders on the same day.

Answer:

SELECT customer_id, order_date, COUNT(*) AS orders
FROM orders
GROUP BY customer_id, order_date
HAVING COUNT(*) >= 2;


---

9. Scenario:

Find the second highest salary in the employees table without using LIMIT.

Answer:

SELECT MAX(salary) AS second_highest
FROM employees
WHERE salary < (SELECT MAX(salary) FROM employees);


---

10. Scenario:

Display the top 3 departments with the most employees.

Answer:

SELECT department_id, COUNT(*) AS total_employees
FROM employees
GROUP BY department_id
ORDER BY total_employees DESC
LIMIT 3;


---

11. Scenario:

Identify customers who ordered every product available.

Answer:

SELECT customer_id
FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY customer_id
HAVING COUNT(DISTINCT oi.product_id) = (SELECT COUNT(*) FROM products);


---

12. Scenario:

Find employees who donâ€™t manage anyone (i.e., are not listed as a manager_id).

Answer:

SELECT employee_id, name
FROM employees
WHERE employee_id NOT IN (SELECT DISTINCT manager_id FROM employees WHERE manager_id IS NOT NULL);


---

13. Scenario:

You want to rank employees within their departments based on salary.

Answer:

SELECT employee_id, name, department_id, salary,
       RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rank_in_dept
FROM employees;


---

14. Scenario:

List products that have never been ordered in the last 6 months.

Answer:

SELECT p.product_id, p.product_name
FROM products p
LEFT JOIN order_items oi ON p.product_id = oi.product_id
LEFT JOIN orders o ON oi.order_id = o.order_id
WHERE o.order_date IS NULL OR o.order_date < DATE_SUB(CURDATE(), INTERVAL 6 MONTH);


---

15. Scenario:

Get the average spend per order per customer.

Answer:

SELECT customer_id, AVG(order_total) AS avg_spend
FROM (
    SELECT o.customer_id, SUM(oi.quantity * oi.price) AS order_total
    FROM orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    GROUP BY o.order_id, o.customer_id
) sub
GROUP BY customer_id;


---

Would you like:

A PDF version of all the SQL scenario questions?

Or more advanced case studies (window functions, CTEs, performance tuning)?


