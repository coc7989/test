stage('Append ID to lsb resources file (if applicable)') {
    when {
        expression { return params.LSB_OPTION }
    }
    steps {
        script {
            echo "----------------Append ID to Config File----------------"
            try {
                def userIds = params.GROUP_AID.split(',').collect { it.trim() }
                def slaPool = params.SLA_POOL ?: env.DEFAULT_SLA_POOL
                echo "Adding User IDs to LSB File: ${userIds} with SLA Pool: ${slaPool}"

                def formattedEntry = "(${userIds.join(',')}) - ${slaPool}"

                echo "Adding entry to LSB File: ${formattedEntry}"

                // Read the file content
                def content = readFile(file: lsb_resources_file_path)
                def startMarker = "#Begin Of MYLSF Automation"
                def endMarker = "#End Of MYLSF Automation"

                // Ensure markers exist in the file
                if (content.contains(startMarker) && content.contains(endMarker)) {
                    // Extract parts
                    def beforeBegin = content.substring(0, content.indexOf(startMarker) + startMarker.length() + 1)
                    def afterEnd = content.substring(content.indexOf(endMarker))
                    def middleSectionStart = content.indexOf(startMarker) + startMarker.length()
                    def middleSectionEnd = content.indexOf(endMarker)
                    def middleSection = content.substring(middleSectionStart, middleSectionEnd).trim()

                    // Append the new entry to the middle section
                    def updatedMiddleSection = middleSection + "\n" + formattedEntry

                    // Combine all parts
                    def updatedContent = beforeBegin + updatedMiddleSection + "\n" + afterEnd

                    // Write back to the file
                    writeFile(file: lsb_resources_file_path, text: updatedContent)
                    echo "Config file ${lsb_resources_file_path} updated successfully."
                } else {
                    error "Delimiters not found in ${lsb_resources_file_path}."
                }
            } catch (Exception e) {
                restore_hwsim_backup_file(config_backup_file_name, config_filename)
                check_in_file_on_failure(config_file_path)
                if (params.LSB_OPTION) {
                    check_in_file_on_failure(lsb_resources_file_path)
                }
                setFail()
                error "Failed to append ID to config file: ${e.message}"
            }
        }
    }
}
