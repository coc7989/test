import navConfig from './config';
import logo from './texas.png';
import { ClusterContext } from '../../../NotificationContext';

const StyledAccount = styled('div')(({ theme }) => ({
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  padding: theme.spacing(1, 1.5),
  borderRadius: Number(theme.shape.borderRadius) * 1.5,
  backgroundColor: alpha(theme.palette.grey[500], 0.12),
}));

Nav.propTypes = {
  openNav: PropTypes.bool,
  onCloseNav: PropTypes.func,
};

export default function Nav({ openNav, onCloseNav }) {
  const { userName, isAdmin } = useContext(ClusterContext); // Get isAdmin from context

  const { pathname } = useLocation();

  const isDesktop = useResponsive('up', 'lg');

  useEffect(() => {
    if (openNav) {
      onCloseNav();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [pathname]);

  // Filter navigation items based on isAdmin
  const filteredNavConfig = navConfig.filter((item) => {
    if (item.title === 'Admin Panel' || item.title === 'Super Admin Panel') {
      return isAdmin; // Only include these items if the user is an admin
    }
    return true; // Include all other items
  });

  const renderContent = (
    <Scrollbar
      sx={{
        height: 1,
        '& .simplebar-content': { height: 1, display: 'flex', flexDirection: 'column' },
      }}
    >
      <Logo label="logoo" />
      <img src={logo} alt="log" />
      <Box sx={{ m: 1 }}>
        <Link underline="none">
          <StyledAccount>
            <Box>
              <Typography variant="subtitle1" sx={{ color: 'text.primary' }} textAlign={'center'}>
                {userName}
              </Typography>
            </Box>
          </StyledAccount>
        </Link>
      </Box>
      <Divider variant="middle" />

      {/* Pass the filtered config to NavSection */}
      <NavSection data={filteredNavConfig} />

      <Divider variant="middle" />
    </Scrollbar>
  );

  return (
    <Box
      component="nav"
      sx={{
        flexShrink: { lg: 0 },
        width: { lg: NAV_WIDTH },
      }}
    >
      {isDesktop ? (
        <Drawer
          open
          variant="permanent"
          PaperProps={{
            sx: {
              width: NAV_WIDTH,
              bgcolor: 'background.default',
              borderRightStyle: 'dashed',
            },
          }}
        >
          {renderContent}
        </Drawer>
      ) : (
        <Drawer
          open={openNav}
          onClose={onCloseNav}
          ModalProps={{
            keepMounted: true,
          }}
          PaperProps={{
            sx: {
              width: NAV_WIDTH,
            },
          }}
        >
          {renderContent}
        </Drawer>
      )}
    </Box>
  );
}
