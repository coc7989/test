Thanks for clarifying! Here's an implementation tailored for your React (Material UI) frontend, Flask backend, and Oracle SQL database.


---

Backend: Flask

Create a Flask route to handle the API request, calculate the average efficiency, and return the result.

Flask Route (app.py)

from flask import Flask, request, jsonify
import cx_Oracle

app = Flask(__name__)

# Oracle DB connection details
DB_CONFIG = {
    "user": "your_db_user",
    "password": "your_db_password",
    "dsn": "your_db_dsn"
}

@app.route('/admin_panel_requests', methods=['POST'])
def calculate_average_efficiency():
    try:
        data = request.json[0]
        group_aid = data.get("GROUP_AID", None)
        user_aid = data.get("USER_AID")
        
        # Connect to Oracle Database
        connection = cx_Oracle.connect(**DB_CONFIG)
        cursor = connection.cursor()

        if group_aid and group_aid != 'none':
            aids = [aid.strip() for aid in group_aid.split(',')]
        else:
            aids = [user_aid]

        # Query to calculate average efficiency
        query = f"""
            SELECT AVG(JOB_EFF) AS average_efficiency
            FROM EFFICIENCY
            WHERE AID IN ({','.join([':aid'+str(i) for i in range(len(aids))])})
        """

        # Bind variables for the query
        bind_vars = {f"aid{i}": aids[i] for i in range(len(aids))}

        cursor.execute(query, bind_vars)
        result = cursor.fetchone()
        average_efficiency = result[0] if result and result[0] else 0

        # Clean up database connection
        cursor.close()
        connection.close()

        return jsonify({"average_efficiency": average_efficiency}), 200

    except Exception as e:
        print(f"Error: {str(e)}")
        return jsonify({"error": "Internal Server Error"}), 500


if __name__ == "__main__":
    app.run(debug=True)


---

Frontend: React with Material UI

The frontend will use the MaterialReactTable component with useState to manage the loading and efficiency states.

React Component

import React, { useState, useEffect } from "react";
import MaterialReactTable from "material-react-table";
import { Box, Typography, CircularProgress } from "@mui/material";
import axios from "axios";

const MyTable = ({ data }) => {
  const handleAverageEfficiency = async (row, setEfficiency, setLoading) => {
    setLoading(true);
    const { REQUEST_ID, USER_AID, GROUP_AID, CATEGORY_NAME } = row.original;

    const rowData = {
      REQUEST_ID,
      USER_AID,
      GROUP_AID: CATEGORY_NAME === "QUEUE" ? GROUP_AID : "none",
      CATEGORY_NAME,
    };

    try {
      const response = await axios.post("http://localhost:5000/admin_panel_requests", [rowData]);
      if (response.status === 200) {
        setEfficiency(response.data.average_efficiency);
      }
    } catch (error) {
      console.error("Error fetching efficiency:", error);
      setEfficiency(null);
    } finally {
      setLoading(false);
    }
  };

  return (
    <MaterialReactTable
      columns={[
        { accessorKey: "REQUEST_ID", header: "Request ID" },
        { accessorKey: "USER_AID", header: "User AID" },
        { accessorKey: "GROUP_AID", header: "Group AID" },
        { accessorKey: "CATEGORY_NAME", header: "Category" },
      ]}
      data={data}
      renderDetailPanel={({ row }) => {
        const [efficiency, setEfficiency] = useState(null);
        const [loading, setLoading] = useState(true);

        useEffect(() => {
          handleAverageEfficiency(row, setEfficiency, setLoading);
        }, [row]);

        return (
          <Box display="flex" flexDirection="column" alignItems="center" p={2}>
            <Typography variant="h6" fontWeight="bold" mb={1}>
              Efficiency
            </Typography>
            {loading ? (
              <CircularProgress />
            ) : efficiency !== null ? (
              <Box
                display="flex"
                alignItems="center"
                justifyContent="center"
                width="100%"
                height="50px"
                borderRadius="8px"
                bgcolor={efficiency < 70 ? "red" : "green"}
                color="white"
              >
                <Typography variant="h6">{`${efficiency.toFixed(2)}%`}</Typography>
              </Box>
            ) : (
              <Typography color="error">Failed to fetch efficiency</Typography>
            )}
          </Box>
        );
      }}
    />
  );
};

export default MyTable;


---

Database: Oracle SQL

Ensure your EFFICIENCY table has the JOB_EFF column and that AID is used as a key to filter records.

Hereâ€™s a quick check:

SELECT AID, JOB_EFF
FROM EFFICIENCY
WHERE AID IN ('aid1', 'aid2');

If necessary, create the EFFICIENCY table:

CREATE TABLE EFFICIENCY (
    AID VARCHAR2(50),
    JOB_EFF NUMBER(5, 2)
);


---

Summary

1. Backend:

Flask handles the API route /admin_panel_requests.

The average efficiency is calculated using Oracle SQL with cx_Oracle.



2. Frontend:

Use MaterialReactTable with a dynamic renderDetailPanel to display efficiency.

Fetch efficiency using Axios and display it with Material UI components.



3. Database:

Query EFFICIENCY for average efficiency based on AID.




This setup ensures modularity, with the backend handling all calculations and the frontend focusing on the UI.

