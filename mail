Here's a detailed explanation of the LSB file removal logic with examples:

Assumptions

LSB file contains user/group IDs along with SLA Pool information in a section marked by:

#Begin Of MYLSF Automation (start marker)

#End Of MYLSF Automation (end marker)


We need to:

Identify the section between these markers.

Remove entries matching the format (GROUP_AID) - SLA_POOL within this section.




---

Step-by-Step Explanation

1. Reading the LSB File

def content = readFile(file: lsb_resources_file_path)

Reads the file content into a string variable content.


Example File Content:

#Begin Of MYLSF Automation
(t052444) - slapool1
(t003222) - slapool2
(a0499461) - slapool3
#End Of MYLSF Automation


---

2. Defining Markers

def startMarker = "#Begin Of MYLSF Automation"
def endMarker = "#End Of MYLSF Automation"

Markers define the start and end of the section we are modifying.



---

3. Validating Markers

if (content.contains(startMarker) && content.contains(endMarker)) {

Ensures the file contains both markers; otherwise, itâ€™s invalid for processing.



---

4. Extracting File Sections

def beforeBegin = content.substring(0, content.indexOf(startMarker) + startMarker.length() + 1)
def afterEnd = content.substring(content.indexOf(endMarker))
def middleSectionStart = content.indexOf(startMarker) + startMarker.length()
def middleSectionEnd = content.indexOf(endMarker)
def middleSection = content.substring(middleSectionStart, middleSectionEnd).trim()

beforeBegin: Content before and including the #Begin marker.

afterEnd: Content from the #End marker onward.

middleSection: Content between #Begin and #End (where the removal occurs).


Example Breakdown:

beforeBegin:

#Begin Of MYLSF Automation

afterEnd:

#End Of MYLSF Automation

middleSection:

(t052444) - slapool1
(t003222) - slapool2
(a0499461) - slapool3



---

5. Defining Entries to Remove

def entriesToRemove = groupAids.collect { aid -> "(${aid}) - ${slaPool}" }

Creates a list of formatted strings for each GROUP_AID to match entries for removal.


Example Input:

GROUP_AID: t052444, t003222

SLA_POOL: slapool1


Entries to Remove:

(t052444) - slapool1
(t003222) - slapool1


---

6. Removing Matching Entries

entriesToRemove.each { entry ->
    updatedMiddleSection = updatedMiddleSection.replaceAll("(?m)^${entry}\\s*\$", "")
}

Iterates through entriesToRemove.

Uses a regex pattern to match the exact line and removes it.

(?m): Multi-line mode.

^${entry}\\s*$: Matches the line starting with entry and removes trailing spaces.



Example:

Before Removal:

(t052444) - slapool1
(t003222) - slapool2
(a0499461) - slapool3

After Removing (t052444) - slapool1:

(t003222) - slapool2
(a0499461) - slapool3



---

7. Reconstructing the File

def updatedContent = beforeBegin + updatedMiddleSection.trim() + "\n" + afterEnd
writeFile(file: lsb_resources_file_path, text: updatedContent)

Combines beforeBegin, the cleaned-up middleSection, and afterEnd into the final content.

Writes the updated content back to the file.


Final File Content: After removing (t052444) - slapool1 and (t003222) - slapool1:

#Begin Of MYLSF Automation
(a0499461) - slapool3
#End Of MYLSF Automation


---

8. Error Handling

} else {
    error "Delimiters not found in ${lsb_resources_file_path}."
}

Ensures the file has proper delimiters; otherwise, an error is raised.



---

Summary

The logic:

1. Reads the LSB file and identifies the section between #Begin and #End.


2. Removes specific (GROUP_AID) - SLA_POOL entries within the section.


3. Writes the updated content back to the file.



This ensures the correct and safe removal of entries without affecting other parts of the file.

