try {
    // Step 1: Create a backup
    sh "cp ${configFile} ${backupFile}"
    echo "Backup created: ${backupFile}"

    // Step 2: Check out the file for editing
    sh "co -l ${configFile}"
    echo "File checked out: ${configFile}"

    // Step 3: Remove USER_ID from the file
    sh "sed -i '/${params.USER_ID}/d' ${configFile}"
    echo "User ID ${params.USER_ID} removed from ${configFile}"

    // Step 4: Check the file back in
    sh "ci -u ${configFile}"
    echo "File checked back in: ${configFile}"

    // Step 5: Add USER_ID to a new config file
    def newConfigFile = "${env.CONFIG_PATH}/new_config_file" // Change to desired target file
    sh "co -l ${newConfigFile}"
    echo "${params.USER_ID}" >> "${newConfigFile}"
    echo "User ID ${params.USER_ID} added to ${newConfigFile}"
    sh "ci -u ${newConfigFile}"
    echo "File checked back in: ${newConfigFile}"

} catch (Exception e) {
    echo "Error encountered: ${e.message}"
    echo "Initiating rollback..."

    // Step 6: Restore backup file
    sh "cp ${backupFile} ${configFile}"
    echo "Backup restored: ${configFile}"

    // Step 7: Revert to the previous version in RCS
    def prevVersion = sh(
        script: "rlog -h ${configFile} | grep 'head:' | awk '{print \$2}'",
        returnStdout: true
    ).trim()
    sh "rcs -o${prevVersion} ${configFile}"
    echo "RCS version reverted to ${prevVersion} for ${configFile}"

    // Step 8: Re-checkout and validate rollback
    sh "co -l ${configFile}"
    echo "File checked out again: ${configFile}"
    error "Rollback complete. Pipeline stopped due to failure."
}
