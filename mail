To implement the requirement where the Approve and Reject buttons are disabled immediately after the database update (regardless of whether Jenkins finishes the build), you need to:

1. Track the row state: Add a state to track whether a row is approved or rejected.


2. Update the UI immediately after the API call: As soon as the database update API call succeeds, update the local state to reflect the status (APPROVED or REJECTED).


3. Disable the buttons based on the row state.



Here's the updated approach:


---

Updated Frontend Code

import React, { useState } from 'react';
import { Button } from '@mui/material';
import Grid2 from '@mui/material/Unstable_Grid2';

const YourComponent = ({ table, row }) => {
  const [rowStatus, setRowStatus] = useState({}); // Track status for each row by REQUEST_ID

  const handleClick = async (row, action) => {
    const { REQUEST_ID, ADMIN_APPROVAL, PROCESSED_DATE, ...otherProps } = row.original;
    const rowData = {
      REQUEST_ID,
      ADMIN_APPROVAL: userID, // Assume userID is defined in your scope
      PROCESSED_DATE: today,  // Assume today is today's date
      action,
    };

    console.log([rowData], 'rows log');

    try {
      // Send the API call to update the database
      const response = await apiInstance.put('/admin_panel_requests', [rowData]);
      console.log(response, 'handleClickresponse');

      // Immediately update the rowStatus state to disable buttons and update the status
      setRowStatus((prevStatus) => ({
        ...prevStatus,
        [REQUEST_ID]: action, // Store the action as status for this REQUEST_ID
      }));

      // Optionally display a toast/snackbar message
      console.log(`Request ${REQUEST_ID} has been ${action}`);
    } catch (error) {
      console.error('Update Failed:', error);
    }
  };

  const renderRowButtons = ({ table, row }) => {
    const { REQUEST_ID } = row.original;

    // Determine if the row has already been approved or rejected
    const isDisabled = !!rowStatus[REQUEST_ID]; // Button is disabled if status exists
    const currentStatus = rowStatus[REQUEST_ID]; // Get current status (APPROVED/REJECTED)

    return (
      <Grid2 textAlign={'center'} justifyContent="center" alignItems="center">
        <Button
          size="large"
          sx={{ mx: 1 }}
          color="success"
          disabled={isDisabled || table.getSelectedRowModel().flatRows.length > 1}
          onClick={() => handleClick(row, 'APPROVED')}
          variant="contained"
        >
          Approve
        </Button>
        <Button
          size="large"
          color="error"
          disabled={isDisabled || table.getSelectedRowModel().flatRows.length > 1}
          onClick={() => handleClick(row, 'REJECTED')}
          variant="contained"
        >
          Reject
        </Button>
        {/* Display current status */}
        {isDisabled && <span style={{ marginLeft: '10px' }}>Status: {currentStatus}</span>}
      </Grid2>
    );
  };

  return renderRowButtons({ table, row });
};

export default YourComponent;


---

Explanation

1. Row State Management (rowStatus):

Added a state variable rowStatus to track the approval/rejection status of each row.

It uses the REQUEST_ID as the key and stores the status (APPROVED or REJECTED) as the value.



2. Immediate Button Disable:

After the API call to update the database completes, the rowStatus state is updated.

Buttons are conditionally disabled based on whether a status exists for the row (isDisabled).



3. Display Current Status:

A small status message ("Status: APPROVED/REJECTED") is shown beside the buttons after the row is approved/rejected.



4. No Wait for Jenkins:

The UI updates immediately after the database API call succeeds. The Jenkins build process can continue in the background without blocking the UI.





---

Behavior Summary

1. When the user clicks the Approve button:

The handleClick function sends the API call to update the database.

On a successful API response, the rowStatus is updated, and the Approve and Reject buttons are disabled.

The status (APPROVED) is displayed immediately beside the buttons.



2. The user does not need to wait for Jenkins to finish, as the buttons are disabled and the row's state is updated instantly.


3. If a Reject action is taken, the same flow applies with the status REJECTED.




---

This approach keeps the UI responsive and ensures a smooth user experience while allowing Jenkins operations to happen asynchronously.

