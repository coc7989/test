import React, { useContext, useEffect, useState } from 'react';
import { Navigate, useRoutes, Routes, Route } from 'react-router-dom';
import DashboardLayout from './layouts/dashboard';
import { ClusterContext } from './NotificationContext';
import DashboardAppPage from './pages/DashboardAppPage';
import AdminDashboard from './pages/AdminDashboard';
import LoginPage from './pages/LoginPage';
import SimpleLayout from './layouts/SimpleLayout';
import Page404 from './pages/Page404';
import QueueAccessForm from './pages/QueueAccessForm';
import SlotRequest from './pages/SlotRequest';
import AdminQueue from './pages/AdminQueue';
import QueryBuild from './pages/QueryBuild';
import Auto from './pages/Auto';

export default function Router() {
  const { userID } = useContext(ClusterContext);
  const [isAdmin, setIsAdmin] = useState(null); // `null` indicates the check is not complete

  useEffect(() => {
    const checkAdminStatus = async () => {
      try {
        const response = await fetch(`/api/check-admin/${userID}`);
        const data = await response.json();
        setIsAdmin(data.isAdmin);
      } catch (error) {
        console.error('Error checking admin status:', error);
        setIsAdmin(false); // Fallback to non-admin if error occurs
      }
    };

    if (userID) {
      checkAdminStatus();
    }
  }, [userID]);

  // Show a loading state until the admin check is complete
  if (isAdmin === null) {
    return <div>Loading...</div>;
  }

  // Use routes dynamically based on the `isAdmin` status
  const routes = useRoutes([
    {
      path: '/dashboard',
      element: <DashboardLayout />,
      children: [
        {
          path: 'app',
          element: isAdmin ? <AdminDashboard /> : <DashboardAppPage />,
        },
      ],
    },
    {
      path: '/history',
      element: <DashboardLayout />,
      children: [
        { element: <Navigate to="/history/app" />, index: true },
        { path: 'app', element: <LoginPage /> },
      ],
    },
    {
      element: <SimpleLayout />,
      children: [
        { element: <Navigate to="/dashboard/app" />, index: true },
        { path: '404', element: <Page404 /> },
        { path: '*', element: <Navigate to="/404" /> },
      ],
    },
    {
      path: '*',
      element: <Navigate to="/404" replace />,
    },
  ]);

  return routes;
}
