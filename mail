Great ‚Äî let's get you a practical starting point. Based on the script you shared, one of the heaviest and most deeply nested stages is:


---

üéØ Candidate for Refactor:

‚úÖ stage('Fetch and Set the config file')

This stage has:

Multiple try-catch blocks

curl, readJSON, validation, and config parsing

Multiple if-else decisions



---

üîß How to Refactor It

Step 1: Extract as a top-level function

Put this above your pipeline {} block:

def fetchAndSetConfigFile() {
    echo "\u001B[1;32m===============================\u001B[0m"
    echo "\u001B[41;1m   STAGE: Fetch and Set the config file   \u001B[0m"
    echo "\u001B[1;32m===============================\u001B[0m"
    echo "Branch is: ${params.BRANCH_NAME}"
    def backendUrls = [
      'dev':'http://lelvdcklsfuedrasa.itg.rh.com:5000',
      'stage':'http://mylsf-stage-direct.itg.rh.com:6000',
      'prod':'http://lelvdcklsfuedprod.itg.rh.com:5000',
    ]
    BACKEND_URL = backendUrls[params.BRANCH_NAME]

    def response = sh(script: "curl -s ${BACKEND_URL}/api/get_config", returnStdout: true).trim()
    echo "response: ${response}"
    def config = readJSON text: response
    echo "Config data: \n${config}"

    def slotKey = (params.SLOT_TYPE == 'gui') ? 'gui-default-slot-limit' : 'regress-default-slot-limit'
    def defaultSlotLimit = config[slotKey][params.CLUSTER_NAME]

    echo "Default Slot Limit from config: ${defaultSlotLimit}"
    echo "Current Slot Limit provided: ${params.CURRENT_SLOT_LIMIT}"

    if (defaultSlotLimit.toString() == params.CURRENT_SLOT_LIMIT.trim()) {
        env.IS_DEFAULT_SLOT_LIMIT = 'true'
        echo "Default and Current Slot Limits are equal. Skipping certain stages."
    } else {
        env.IS_DEFAULT_SLOT_LIMIT = 'false'
        echo "Slot limits differ. Proceeding with further stages."
    }

    if (params.SLOT_TYPE == 'gui') {
        CONFIG_FILE_OPTIONS = config."${params.CLUSTER_NAME}-gui"
        echo "Selected GUI Config File Options: \n ${CONFIG_FILE_OPTIONS}"
    } else if (params.SLOT_TYPE == 'regress') {
        CONFIG_FILE_OPTIONS = config."${params.CLUSTER_NAME}-regress"
        echo "Selected REGRESS Config File Options: \n ${CONFIG_FILE_OPTIONS}"
    } else {
        error("Unknown slot selected: ${params.SLOT_TYPE}")
    }
}


---

Step 2: Replace the current stage with a call

Inside your pipeline:

stage('Fetch and Set the config file') {
  steps {
    script {
      try {
        fetchAndSetConfigFile()
      } catch (Exception e) {
        error_reason = "Error in Fetch and Set the config file: ${e.message}"
        error(error_reason)
      }
    }
    script {
      echo "\u001B[1;34m===============================\u001B[0m"
      echo "\u001B[1;34m   STAGE FINISHED                \u001B[0m"
      echo "\u001B[1;34m===============================\u001B[0m"
    }
  }
}


---

üß™ What This Does

Moves ~80 lines of logic out of the CPS-transformed method

Keeps the pipeline script lean

Eliminates a major contributor to the ‚ÄúMethodTooLarge‚Äù exception



---

Would you like me to suggest 1‚Äì2 more blocks like this you should refactor next?

