To achieve this behavior, you need to:

1. Update the REQUEST_STATUS column in the table: After the database update API call succeeds, update the table's data source for the row to reflect the new status (APPROVED or REJECTED).


2. Disable the buttons: Once the status is updated, disable the Approve and Reject buttons for the respective row.



Hereâ€™s how you can implement this:


---

Updated Frontend Code

const renderRowButtons = ({ table, row }) => {
  const handleClick = async (row, action) => {
    const { REQUEST_ID, ADMIN_APPROVAL, PROCESSED_DATE, ...otherProps } = row.original;
    const rowData = {
      REQUEST_ID,
      ADMIN_APPROVAL: userID, // Assume `userID` is defined
      PROCESSED_DATE: today,  // Assume `today` is today's date
      action,
    };

    console.log([rowData], 'rows log');

    try {
      // Send the API call to update the database
      const response = await apiInstance.put('/admin_panel_requests', [rowData]);
      console.log(response, 'handleClickresponse');

      // Immediately update the REQUEST_STATUS and disable buttons
      table.options.meta.updateData(row.index, {
        ...row.original,
        REQUEST_STATUS: action, // Update status to APPROVED or REJECTED
      });

      // Optionally show a success notification
      console.log(`Request ${REQUEST_ID} has been ${action}`);
    } catch (error) {
      console.error('Update Failed:', error);
    }
  };

  // Buttons are disabled if the REQUEST_STATUS is not 'PENDING'
  const isDisabled = row.original.REQUEST_STATUS !== 'PENDING';

  return (
    <Grid2 textAlign={'center'} justifyContent="center" alignItems="center">
      <Button
        size="large"
        sx={{ mx: 1 }}
        color="success"
        disabled={isDisabled || table.getSelectedRowModel().flatRows.length > 1}
        onClick={() => handleClick(row, 'APPROVED')}
        variant="contained"
      >
        Approve
      </Button>
      <Button
        size="large"
        color="error"
        disabled={isDisabled || table.getSelectedRowModel().flatRows.length > 1}
        onClick={() => handleClick(row, 'REJECTED')}
        variant="contained"
      >
        Reject
      </Button>
    </Grid2>
  );
};


---

Changes Made

1. Update REQUEST_STATUS in the table:

The handleClick function now uses table.options.meta.updateData(row.index, ...) to update the table's data source after the API call succeeds.

This ensures the REQUEST_STATUS column is updated to APPROVED or REJECTED based on the action.



2. Disable Buttons Based on REQUEST_STATUS:

Buttons are conditionally disabled if row.original.REQUEST_STATUS is not PENDING.



3. Responsiveness:

Buttons are disabled immediately after the API call succeeds.





---

How It Works

1. Before User Action:

The Approve and Reject buttons are enabled if the REQUEST_STATUS is PENDING.



2. User Clicks Approve/Reject:

The handleClick function sends the API request.

Once the API call is successful:

The REQUEST_STATUS is updated in the table to APPROVED or REJECTED.

The buttons are disabled because the status is no longer PENDING.




3. After User Action:

The buttons are grayed out, and the REQUEST_STATUS column reflects the updated status.





---

Benefits of This Approach

No extra status messages are shown, as the REQUEST_STATUS column in the table directly reflects the updated state.

Ensures immediate UI feedback after the database update, while Jenkins operations happen asynchronously.

Keeps the UI consistent and intuitive, matching the user's expectation.


