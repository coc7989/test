Here are 10 basic scenario-based SQL questions with context and what kind of answers you should expect. These simulate real-world tasks and help assess a candidateâ€™s ability to think practically in SQL.


---

ðŸ§© Basic Scenario-Based SQL Questions


---

1. Scenario:

Your manager wants a list of all customers who have not placed any orders.

Question:
How would you find customers without any orders?

Expected Answer:

SELECT c.customer_id, c.name
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
WHERE o.order_id IS NULL;


---

2. Scenario:

You need to find the total number of orders placed each day.

Question:
How would you get the daily order count?

Expected Answer:

SELECT order_date, COUNT(*) AS total_orders
FROM orders
GROUP BY order_date
ORDER BY order_date;


---

3. Scenario:

Your team wants to know the top 5 products by sales revenue.

Question:
How would you calculate and list the top 5 products by total revenue?

Expected Answer:

SELECT p.product_name, SUM(o.quantity * o.price) AS total_revenue
FROM order_items o
JOIN products p ON o.product_id = p.product_id
GROUP BY p.product_name
ORDER BY total_revenue DESC
LIMIT 5;


---

4. Scenario:

You need to find duplicate emails in the users table.

Question:
How would you detect users with the same email?

Expected Answer:

SELECT email, COUNT(*) AS occurrences
FROM users
GROUP BY email
HAVING COUNT(*) > 1;


---

5. Scenario:

You want to get a list of employees who earn more than their departmentâ€™s average salary.

Question:
How would you find employees earning above department average?

Expected Answer:

SELECT e.employee_id, e.name, e.salary, e.department_id
FROM employees e
JOIN (
    SELECT department_id, AVG(salary) AS avg_salary
    FROM employees
    GROUP BY department_id
) dept_avg ON e.department_id = dept_avg.department_id
WHERE e.salary > dept_avg.avg_salary;


---

6. Scenario:

The client wants to see the first order placed by each customer.

Question:
How would you find each customer's first order?

Expected Answer:

SELECT customer_id, MIN(order_date) AS first_order_date
FROM orders
GROUP BY customer_id;


---

7. Scenario:

You want to get the top 3 employees with the highest salary in each department.

Question:
How would you write a query to do that?

Expected Answer: (Using window functions)

SELECT employee_id, name, department_id, salary
FROM (
    SELECT *,
           ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rn
    FROM employees
) sub
WHERE rn <= 3;


---

8. Scenario:

Youâ€™re asked to calculate the average order amount, but only for orders over $100.

Question:
How do you write this query?

Expected Answer:

SELECT AVG(total_amount) AS avg_large_order
FROM orders
WHERE total_amount > 100;


---

9. Scenario:

You need to identify products that have never been ordered.

Question:
How would you find products not present in the order_items table?

Expected Answer:

SELECT p.product_id, p.product_name
FROM products p
LEFT JOIN order_items o ON p.product_id = o.product_id
WHERE o.product_id IS NULL;


---

10. Scenario:

You need to show a list of customers along with the total number of orders they've placedâ€”even if it's zero.

Question:
How do you write this?

Expected Answer:

SELECT c.customer_id, c.name, COUNT(o.order_id) AS total_orders
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.name;


---

Would you like intermediate scenario-based questions next (e.g., involving CTEs, window functions, or performance optimizations)?

