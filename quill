pipeline {
    agent any

    parameters {
        string(name: 'USER_ID', defaultValue: 'user123', description: 'User ID to move')
        string(name: 'SOURCE_FILE', defaultValue: 'source.txt', description: 'File to remove the user ID from')
        string(name: 'DEST_FILE', defaultValue: 'dest.txt', description: 'File to append the user ID to')
    }

    environment {
        RCS_DIR = "/path/to/rcs"  // Set this to your RCS directory
    }

    stages {
        stage('Checkout Files') {
            steps {
                script {
                    try {
                        sh """
                            co -l ${params.SOURCE_FILE}
                            co -l ${params.DEST_FILE}
                        """
                    } catch (Exception e) {
                        error "Checkout failed: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Capture Revision Numbers') {
            steps {
                script {
                    try {
                        env.SOURCE_REV = sh(script: "rlog -h ${params.SOURCE_FILE} | awk '/head/ {print \$2}'", returnStdout: true).trim()
                        env.DEST_REV = sh(script: "rlog -h ${params.DEST_FILE} | awk '/head/ {print \$2}'", returnStdout: true).trim()
                        echo "Captured revisions - Source: ${env.SOURCE_REV}, Destination: ${env.DEST_REV}"
                    } catch (Exception e) {
                        error "Failed to capture revision numbers: ${e.getMessage()}"
                    }
                }
            }
        }

        stage('Modify Files') {
            steps {
                script {
                    try {
                        // Remove user ID from source file
                        sh "sed -i '/${params.USER_ID}/d' ${params.SOURCE_FILE}"

                        // Append user ID to destination file
                        sh "echo '${params.USER_ID}' >> ${params.DEST_FILE}"

                    } catch (Exception e) {
                        echo "Modification failed: ${e.getMessage()}"
                        echo "Rolling back to previous versions..."
                        sh """
                            rcs -o${env.SOURCE_REV} ${params.SOURCE_FILE}
                            rcs -o${env.DEST_REV} ${params.DEST_FILE}
                            co -l ${params.SOURCE_FILE}
                            co -l ${params.DEST_FILE}
                        """
                        error "Rollback complete due to modification failure"
                    }
                }
            }
        }

        stage('Check-in Changes') {
            steps {
                script {
                    try {
                        sh """
                            ci -u -m'Updated user list' ${params.SOURCE_FILE}
                            ci -u -m'Updated user list' ${params.DEST_FILE}
                        """
                    } catch (Exception e) {
                        echo "Check-in failed: ${e.getMessage()}"
                        echo "Rolling back to previous versions..."
                        sh """
                            rcs -o${env.SOURCE_REV} ${params.SOURCE_FILE}
                            rcs -o${env.DEST_REV} ${params.DEST_FILE}
                            co -l ${params.SOURCE_FILE}
                            co -l ${params.DEST_FILE}
                        """
                        error "Rollback complete due to check-in failure"
                    }
                }
            }
        }
    }
}
