import React, { useState } from "react";
import axios from "axios";
import CustomCard from "./CardComponent";
import {
  MenuItem,
  FormControl,
  Select,
  RadioGroup,
  FormControlLabel,
  Radio,
  Button,
  Stack,
  Alert,
  Container,
  Grid,
  TextField, // Import TextField component from Material-UI
  Typography, // Import Typography component from Material-UI
} from "@mui/material";
import ReactDiffViewer from "react-diff-viewer-continued";
import { useDropzone } from "react-dropzone";
import { useCallback } from "react";

const InputForm = () => {
  const [files, setFiles] = useState([]);
  const [diffData, setDiffData] = useState(null);
  const [alert, setAlert] = useState("");
  const [vendor, setVendor] = useState("");
  const [operation, setOperation] = useState("");
  const [comment, setComment] = useState(""); // Add state for comment
  const [isLoading, setIsLoading] = useState(false);

  const onDrop = useCallback((acceptedFiles) => {
    setFiles(acceptedFiles);
  }, []);

  const handleUpload = async () => {
    setIsLoading(true);

    const formData = new FormData();

    formData.append("vendor", vendor);
    formData.append("operation", operation);
    formData.append("comment", comment); // Append comment to formData

    files.forEach((file) => {
      formData.append("files", file);
    });

    try {
      const response = await axios.post(
        "http://localhost:5000/upload",
        formData,
        {
          headers: {
            "Content-Type": "multipart/form-data",
          },
        }
      );

      setAlert(response.data.message);
      const { originalData, modifiedData } = response.data;
      setDiffData({ originalData, modifiedData });
    } catch (error) {
      console.error("File upload failed", error);
      setAlert(error.response.data.error);
    } finally {
      setIsLoading(false);
    }
  };

  const { getRootProps, getInputProps } = useDropzone({ onDrop });

  const dropdownOptions = ["Cadence", "Synopsys", "Vendor3"];
  const radioOptions = [
    { value: "Modify", label: "Modify" },
    { value: "Replace", label: "Replace" },
  ];

  const newStyles = {
    diffContainer: {
      overflowX: "auto",
      width: "100%",
    },
    contentText: {
      wordWrap: "break-word",
      overflowWrap: "break-word",
      wordBreak: "break-all",
    },
  };

  const handleCommentChange = (e) => {
    // Limit comment to 500 characters
    if (e.target.value.length <= 500) {
      setComment(e.target.value);
    }
  };

  return (
    <Container>
      <Grid container columnSpacing={5}>
        <Grid item xs={12} sm={6} md={3}>
          <CustomCard title="Select a Vendor">
            <FormControl fullWidth>
              <Select
                value={vendor}
                onChange={(e) => setVendor(e.target.value)}
                displayEmpty
                inputProps={{ "aria-label": "Without label" }}
                style={{ width: "100%", height: "40px", fontSize: "12px" }}
              >
                <MenuItem value="" disabled>
                  Select an option
                </MenuItem>
                {dropdownOptions.map((option, index) => (
                  <MenuItem key={index} value={option}>
                    {option}
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </CustomCard>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <CustomCard title="Choose Operation">
            <RadioGroup
              value={operation}
              onChange={(e) => setOperation(e.target.value)}
              style={{ width: "100%", height: "20px" }}
            >
              {radioOptions.map((radio, index) => (
                <FormControlLabel
                  key={index}
                  value={radio.value}
                  control={<Radio size="small" />}
                  label={radio.label}
                />
              ))}
            </RadioGroup>
          </CustomCard>
        </Grid>

        <Grid item xs={12} sm={12} md={6}>
          <CustomCard title="Upload or Drop a file">
            <Stack
              direction="row"
              spacing={2}
              justifyContent="center"
              alignItems="stretch"
              style={{ maxWidth: "400px" }}
              {...getRootProps()}
            >
              <input {...getInputProps()} style={{ backgroundColor: "grey" }} />
              <ul>
                {files.map((file) => (
                  <li key={file.name}>{file.name}</li>
                ))}
              </ul>
            </Stack>
            <TextField
              multiline
              rows={4}
              label="Comment (Max 500 characters)"
              value={comment}
              onChange={handleCommentChange}
            />
            <Typography variant="body2" color="textSecondary" align="right">
              {500 - comment.length} characters left
            </Typography>
            <Button
              type="submit"
              variant="contained"
              onClick={handleUpload}
              style={{ maxHeight: "50px", fontSize: "13px", marginTop: "10px" }}
            >
              Validate
            </Button>
          </CustomCard>
        </Grid>

        <Grid item xs={12} sm={6} md={4}>
          {alert.length > 0 && (
            <Alert
              sx={{ width: "60%", margin: "auto", marginTop: "2rem" }}
              severity="success"
            >
              {alert}
            </Alert>
          )}
        </Grid>

        <Grid item xs={12} sm={6} md={12} style={{ marginTop: "2rem" }}>
          {isLoading ? (
            <Skeleton variant="rectangular" width="100%" height={200} />
          ) : (
            diffData && (
              <ReactDiffViewer
                styles={newStyles}
                oldValue={diffData.originalData}
                newValue={diffData.modifiedData}
                splitView={true}
                leftTitle="Uploaded Content"
                rightTitle="Updated Content"
              />
            )
          )}
        </Grid>
      </Grid>
    </Container>
  );
};

export default InputForm;
