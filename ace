scl_version_bp.py

Issue: "username='flames'" is hardcoded.
Improvement: Fetch it from an environment variable for flexibility and security

Issue: Use with statement for SSH client
Why: Ensures the connection is automatically closed, even if exceptions occur.
with paramiko.SSHClient() as ssh:

Logging e in some except blocks where it's not defined
except paramiko.AuthenticationException as e:

Calling .read() twice loses output
print(f"Output: {stdout.read().decode()}")  #- second call to .read() returns empty
print(f"Output: {output}")
print(f"Error: {error}")

Extract SSH command logic to a helper function like make function for ssh connection and then one for working
def execute_remote_command(hostname, command):
    ...
    return output, error


Check if data is there or not
server_name = request.form['server_name']
SSH_PRIVATE_KEY = os.getenv("SSH_PRIVATE_KEY")

FileUpload.js

vendor == 'snps'
vendor === 'snps'

validationResults[id].fileSclVersion > version
validationResults[id] might not be defined.
validationResults[id] &&
typeof validationResults[id].fileSclVersion === 'number' &&
validationResults[id].fileSclVersion > version

optimized with React.memo or useMemo
const renderedFiles = useMemo(() => files.map(...), [files, validationResults]);


Refactor this code as a new fuction and pass value and return validation message
{validationResults[id]
? validationResults[id].isValid
? vendor == 'snps'
? validationResults[id].fileSclVersion > version
? `Valid MAC ID  and Invalid File SCL Version: (${validationResults[id].fileSclVersion})`
: `Valid MAC ID  and Valid File SCL Version: (${validationResults[id].fileSclVersion})`
: 'Valid MAC ID'
: `Invalid MAC ID (${validationResults[id].macId})`
: 'Validating...'}

Submit.js

Avoid using assignment in render logic
{!renderAlert && (renderAlert = true) && (

Use`id` instead of `index`
files.map(({ id, name }, index) => (
  <span key={index}>...</span>

Incorrect disabled logic-> true is not required
disabled={isSubmitDisabled || loading || (compareData.length > 0 && true) || files.length == 0}

validationResults[id].fileSclVersion > version
Use this validationResults[id]?.fileSclVersion > version

Compare_lic

Issue: Paths like /opt/license_files/... and /home/flames/bin/... are hardcoded. Also check if path available 
def licenseBasePath = "/opt/license_files/license_requests"
def compareScript = "/opt/license_files/scripts/compare_lic"
def verifyScript = "/home/flames/bin/sssverify"

Sometimes you use params.VENDOR, sometimes ${my_vendor}. Stick with params.X unless transformation is necessary

If a line in dataLines has fewer than 3 columns, columns[1] or columns[2]

if (columns.length >= 3) {
    // parse
} else {
    echo "Error: ${dataLines[i]}"
}

Add a try-catch block
try {
    def file1Value = columns[1].toInteger()
    def file2Value = columns[2].toInteger()
    ...
} catch (e) {
    echo "Error parsing integers in line: ${dataLines[i]}"
    continue
}

Break things into smaller chunks
def verifyLicense(...) { ... }
def runComparison(...) { ... }
def prepareComparisonOutput(...) { ... }
def failureEmail
def successEmail


Setting_env pipeline

No validation of parameters: BUILD_NUMBER and mappedlicense
Add checks to ensure they are not empty or invalid.

statusCode("mkdir -p $licenseDirectory")
If any part of $licenseDirectory contains spaces or special characters, it will break.
statusCode("mkdir -p \"$licenseDirectory\"")
statusCode("cp \"/home/flames/data/$mappedlicense\" \"$licenseDirectory/old/\"")

Redundant mkdir -p calls
make one line shell command to create all directories

Change ALL params name to capital in all pipelines ex: mappedlicense to MAPPED_LICENSE

Break things into stages for better defining what each stage does rather than having everything into one stage. 

Use ansicolors to make the console output more human friendly

No post failure stages available in Pipeline?

Sync_validation pipeline

def errorList = [] declared globally: Declare errorList inside a script block and pass it as a local variable between stages if needed.

error = "${output.split('\n')[-2]}"
Overwrites error, which is a Jenkins built-in step (used to fail the build). Use a different variable name like errorMsg.

Add input validation for SERVER_NAME, mappedlicense, and all parameters
if (!params.SERVER_NAME?.trim()) {
    error("SERVER_NAME is required")
}

def output = sh(script:"ssh -tT -o StrictHostKeyChecking=no $servers '/home/flames/data/sync_and_validate.sh $vendors $mappedlicense $backupFile $buildNum $port1 $port2 $vendorDaemon || true '", returnStdout: true).trim()
why ssh ... 'script || true' ? Can leads to false positives
if (output != 0) {
   error "Remote execution failed"
}

Instead of doing 4 rsyncs separately, batch them with &&

Use vendorName instead of vendors 

rsync -v /opt/license_files/license_requests/${buildNum}/old/${mappedlicense}
Use this rsync -v "/opt/license_files/license_requests/${buildNum}/old/${mappedlicense}"

emailext can be as a function?

failure success email functions
