tTo display the accessEndDate exactly as it comes from the backend, without timezone conversion, and in a consistent format like:

(Ending on: Mon, 09 Jun 2025)

You should avoid new Date(), because it applies the local timezone (which causes issues across regions like India, Dallas, China, Freising).


---

✅ Solution

If your backend is returning the date as a string (e.g., "2025-06-09T00:00:00Z" or "2025-06-09"), you should treat it as a plain string and format it using date-fns or dayjs without converting to local time.


---

🔁 Option 1: Use dayjs with UTC plugin

1. Install dayjs (if not already):



npm install dayjs

2. Format date safely:



import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc';
import advancedFormat from 'dayjs/plugin/advancedFormat';

dayjs.extend(utc);
dayjs.extend(advancedFormat);

...

{accessEndDate && (
  <>
    {' '} (Ending on:{' '}
    <Typography component="span" color="secondary" fontWeight="bold">
      {dayjs.utc(accessEndDate).format('ddd, DD MMM YYYY')}
    </Typography>
    )
  </>
)}

✅ This will render:

(Ending on: Mon, 09 Jun 2025)

🛡️ And utc() ensures it won’t be affected by the user's local timezone.


---

🛠 Backend Best Practice

To make sure you send a timezone-independent date string:

# Assuming `access_end_date` is a datetime.date or datetime.datetime object
if access_end_date:
    access_end_date = access_end_date.strftime("%Y-%m-%d")


---

✅ Summary

Avoid new Date() in frontend if you don't want local timezone conversion.

Use dayjs.utc(...).format('ddd, DD MMM YYYY') to format the date safely.

Send YYYY-MM-DD format from backend to make it reliable across regions.


Let me know if you want to support other languages/locales (e.g., Hindi, German) too!

