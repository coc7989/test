Yes, you can create separate log files for React and Flask and write error logs to them in real-time. Here's how you can do it:


---

1. Logging Errors in Flask (Backend)

You can create a dedicated flask_error.log file and configure Flask to write errors there.

Steps:

1. Create a log file: flask_error.log


2. Modify your Flask app to write errors to this file.



Code:

import logging
from logging.handlers import RotatingFileHandler
from flask import Flask

app = Flask(__name__)

# Create a rotating file handler (prevents logs from getting too big)
log_file = "flask_error.log"
handler = RotatingFileHandler(log_file, maxBytes=5 * 1024 * 1024, backupCount=3)
handler.setLevel(logging.ERROR)
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
handler.setFormatter(formatter)

# Attach handler to Flask's logger
app.logger.addHandler(handler)
app.logger.setLevel(logging.INFO)

@app.route("/")
def home():
    try:
        # Simulate an error
        raise Exception("Test error in Flask")
    except Exception as e:
        app.logger.error("Error occurred: %s", str(e), exc_info=True)
    return "Hello, World!"

if __name__ == "__main__":
    app.run(debug=True)

How It Works:

All errors will be written to flask_error.log.

It automatically rotates logs when the file reaches 5MB.

The log will contain timestamps and full error traces.



---

2. Logging Errors in React (Frontend)

Since JavaScript runs in the browser, it doesnâ€™t have direct file access, but you can:

Capture errors and send them to an API.

Save logs to a file on the server.


Steps:

1. Create a log file on the server: react_error.log


2. Modify React to send errors to Flask.


3. Flask will write React errors to react_error.log.



Step 1: Create Flask API to Receive Logs

Modify your Flask app to accept logs from React.

from flask import request, jsonify

@app.route("/log_error", methods=["POST"])
def log_error():
    try:
        data = request.json
        error_message = data.get("error_message")
        log_file = "react_error.log"

        # Write to the React log file
        with open(log_file, "a") as file:
            file.write(f"{datetime.datetime.now()} - ERROR - {error_message}\n")

        return jsonify({"status": "logged"}), 200
    except Exception as e:
        app.logger.error("Failed to log error: %s", str(e), exc_info=True)
        return jsonify({"status": "error"}), 500


---

Step 2: Send Errors from React to Flask

In React, use window.onerror or an ErrorBoundary to catch and send errors to Flask.

Method 1: Global Error Listener

Add this in index.js:

window.onerror = function (message, source, lineno, colno, error) {
  fetch("http://localhost:5000/log_error", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      error_message: `Message: ${message}, Source: ${source}, Line: ${lineno}, Column: ${colno}`,
    }),
  });
};

This sends JavaScript errors to Flask whenever they occur.

Method 2: React Error Boundary

Create an ErrorBoundary.js:

import React from "react";

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    fetch("http://localhost:5000/log_error", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        error_message: `Error: ${error}, Info: ${JSON.stringify(errorInfo)}`,
      }),
    });
  }

  render() {
    if (this.state.hasError) {
      return <h1>Something went wrong.</h1>;
    }
    return this.props.children;
  }
}

export default ErrorBoundary;

Wrap your entire app in ErrorBoundary in App.js:

import ErrorBoundary from "./ErrorBoundary";

function App() {
  return (
    <ErrorBoundary>
      <YourMainComponent />
    </ErrorBoundary>
  );
}

export default App;


---

How This Works

Flask writes backend errors to flask_error.log.

React errors are sent to Flask, which writes them to react_error.log.

Both logs persist errors, even if multiple users access the app.



---

Bonus: Monitor Logs in Real-Time

To see logs live, use:

tail -f flask_error.log
tail -f react_error.log

This will show errors as they happen.

Would you like to add automatic alerts when errors occur?

