tTo implement the fallback logic where the current_slot_limit is fetched from config.json if it's not found in the database, you'll need to:

1. Load config.json at the application startup (or on demand).


2. Parse and access the appropriate value based on slot_type and cluster_name.


3. Modify the existing logic in the get_current_slot_limit route to use this fallback.



Here’s how you can adjust your main.py:


---

✅ Step 1: Load config.json (at the top of your main.py)

import json
import os

# Load config.json
with open(os.path.join(os.path.dirname(__file__), 'config.json')) as f:
    config_data = json.load(f)


---

✅ Step 2: Modify the get_current_slot_limit route

Update the else block to check config_data based on slot_type and cluster_name.

@app.route(f"{API_URL_PREFIX}/get_current_slot_limit", methods=['GET'])
@cross_origin()
def get_current_slot_limit(): 
    user_id = request.args.get('userID')
    slot_type = request.args.get('SLOT_TYPE')
    cluster_name = request.args.get('CLUSTER_NAME')
    request_id = str(uuid.uuid4())

    if not user_id or not slot_type or not cluster_name:
        return jsonify({'error_message': 'Missing required query parameters'}), 500

    try:
        conn = get_oracle_connection()
        cursor = conn.cursor()

        query = """
            SELECT current_slot_limit FROM CURRENT_SLOT_LIMIT
            WHERE USERID = :user_id
              AND SLOT_TYPE = :slot_type
              AND CLUSTER_NAME = :cluster_name
        """
        cursor.execute(query, {
            "user_id": user_id,
            "slot_type": slot_type,
            "cluster_name": cluster_name
        })

        result = cursor.fetchone()

        if result:
            current_slot_limit = int(result[0])
        else:
            # Fallback: try to get from config.json
            slot_key = f"{slot_type.lower()}-default-slot-limit"
            if slot_key in config_data and cluster_name in config_data[slot_key]:
                current_slot_limit = config_data[slot_key][cluster_name]
            else:
                return jsonify({'error_message': 'No slot limit data found in DB or config'}), 500

        print("get_current_slot_limit current_slot_limit:", current_slot_limit)
        return jsonify({
            "user_id": user_id,
            "slot_type": slot_type,
            "cluster_name": cluster_name,
            "current_slot_limit": current_slot_limit,
            "request_id": request_id
        }), 200

    except Exception as e:
        print("Oracle DB error:", traceback.format_exc())
        return jsonify({'error_message': 'Internal server error occurred while fetching slot limit'}), 500


---

✅ Optional: Add logging for fallback

You might want to log a message when falling back to config:

print(f"Slot limit not found in DB. Falling back to config for slot_type={slot_type}, cluster_name={cluster_name}")


---

Let me know if you want to cache config.json dynamically (e.g., reload if updated) or validate the config format on load.

