eimport React, { useState, useEffect } from 'react';
import {
  AppBar, Toolbar, Typography, Button, Container,
  ToggleButtonGroup, ToggleButton, Box, TextField,
  Paper, Snackbar, Alert
} from '@mui/material';
import axios from 'axios';

const LOG_TYPES = {
  api: 'API Logs',
  cron: 'Cron Logs',
};

export default function LogViewer() {
  const [logType, setLogType] = useState('api');
  const [logContent, setLogContent] = useState('');
  const [filteredContent, setFilteredContent] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [lastUpdated, setLastUpdated] = useState('');
  const [env, setEnv] = useState('dev'); // Optionally fetch this from backend
  const [errorMsg, setErrorMsg] = useState('');

  const fetchLogs = async () => {
    try {
      const response = await axios.get(`/logs/${logType}`);
      setLogContent(response.data);
      setLastUpdated(new Date().toLocaleString());
      setErrorMsg('');
    } catch (err) {
      setErrorMsg('Error fetching logs');
      setLogContent('');
    }
  };

  useEffect(() => {
    fetchLogs();
  }, [logType]);

  useEffect(() => {
    if (searchTerm) {
      const filtered = logContent
        .split('\n')
        .filter(line => line.toLowerCase().includes(searchTerm.toLowerCase()))
        .join('\n');
      setFilteredContent(filtered);
    } else {
      setFilteredContent(logContent);
    }
  }, [searchTerm, logContent]);

  const handleDownload = () => {
    const blob = new Blob([filteredContent], { type: 'text/plain' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `${logType}_logs.txt`;
    link.click();
  };

  return (
    <Box>
      <AppBar position="static">
        <Toolbar>
          <Typography variant="h6" sx={{ flexGrow: 1 }}>
            Log Viewer - {env.toUpperCase()}
          </Typography>
          <Button color="inherit" onClick={fetchLogs}>Refresh</Button>
        </Toolbar>
      </AppBar>

      <Container sx={{ mt: 4 }}>
        <ToggleButtonGroup
          value={logType}
          exclusive
          onChange={(e, val) => val && setLogType(val)}
          aria-label="log type"
          sx={{ mb: 2 }}
        >
          {Object.entries(LOG_TYPES).map(([key, label]) => (
            <ToggleButton key={key} value={key}>{label}</ToggleButton>
          ))}
        </ToggleButtonGroup>

        <Box display="flex" alignItems="center" gap={2} mb={2}>
          <TextField
            label="Search logs"
            variant="outlined"
            value={searchTerm}
            onChange={e => setSearchTerm(e.target.value)}
            fullWidth
          />
          <Button variant="contained" color="primary" onClick={handleDownload}>
            Download
          </Button>
        </Box>

        <Typography variant="caption" gutterBottom>
          Last updated: {lastUpdated}
        </Typography>

        <Paper
          elevation={3}
          sx={{
            bgcolor: '#1e1e1e',
            color: '#e0e0e0',
            p: 2,
            height: 500,
            overflow: 'auto',
            whiteSpace: 'pre-wrap',
            fontFamily: 'monospace',
          }}
        >
          {filteredContent || 'No logs available.'}
        </Paper>

        <Snackbar open={!!errorMsg} autoHideDuration={6000} onClose={() => setErrorMsg('')}>
          <Alert severity="error" onClose={() => setErrorMsg('')}>
            {errorMsg}
          </Alert>
        </Snackbar>
      </Container>
    </Box>
  );
}
