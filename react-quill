tThanks for confirming! Here's the updated code using Option 2 (single context), where we manage two separate cluster lists in the same ClusterContext:


---

✅ Updated ClusterContext.js

import { createContext, useContext, useEffect, useState } from 'react';
import apiInstance from './apiInstance'; // Update path if needed

const ClusterContext = createContext();
export const useCluster = () => useContext(ClusterContext);

export const ClusterProvider = ({ children }) => {
  const BRANCH_NAME = process.env.REACT_APP_BRANCH_NAME || 'dev';
  const isDev = BRANCH_NAME === 'dev';

  const [userID, setUserID] = useState(isDev ? 'a0510342' : '');
  const [isAdmin, setIsAdmin] = useState(null);

  // Separate states
  const [adminClusterList, setAdminClusterList] = useState({});
  const [selectedAdminCluster, setSelectedAdminCluster] = useState('');
  const [userClusterList, setUserClusterList] = useState({});
  const [selectedUserCluster, setSelectedUserCluster] = useState('');

  useEffect(() => {
    const checkAdminStatus = async () => {
      try {
        const response = await apiInstance.get(`/check_admin/${userID}`);
        if (response.status === 200) {
          setIsAdmin(response.data.isAdmin);
        }
      } catch (error) {
        console.error('Error checking admin status:', error);
        setIsAdmin(false);
      }
    };

    if (userID) checkAdminStatus();
  }, [userID]);

  const fetchClusters = async () => {
    try {
      const endpoint = isAdmin ? `/admin_idusers?user=${userID}` : `/idusers?user=${userID}`;
      const response = await apiInstance.get(endpoint);

      const {
        default: defaultCluster,
        service_account: serviceAccount,
        userName,
        userID: ssoUserID,
        ...clusters
      } = response.data;

      if (!isDev) setUserID(ssoUserID);

      if (isAdmin) {
        setAdminClusterList(clusters);
        setSelectedAdminCluster(defaultCluster);
      } else {
        setUserClusterList(clusters);
        setSelectedUserCluster(defaultCluster);
      }

    } catch (error) {
      console.error('Error fetching clusters:', error);
    }
  };

  useEffect(() => {
    if (userID && isAdmin !== null) {
      fetchClusters();
    }
  }, [userID, isAdmin]);

  return (
    <ClusterContext.Provider
      value={{
        // common
        userID,
        isAdmin,

        // for admin dashboard
        adminClusterList,
        selectedAdminCluster,
        setSelectedAdminCluster,

        // for user dashboard
        userClusterList,
        selectedUserCluster,
        setSelectedUserCluster,
      }}
    >
      {children}
    </ClusterContext.Provider>
  );
};


---

✅ In AdminDashboard.js

Update to use adminClusterList and selectedAdminCluster:

import { useContext } from 'react';
import { ClusterContext } from './ClusterContext'; // Adjust path

export default function AdminDashboard() {
  const {
    adminClusterList,
    selectedAdminCluster,
    setSelectedAdminCluster,
  } = useContext(ClusterContext);

  const handleClusterChange = (event) => {
    setSelectedAdminCluster(event.target.value);
  };

  return (
    <Grid item md={6}>
      <FormControl fullWidth sx={{ minWidth: 400 }} size="medium">
        <InputLabel id="admin-cluster-label">Cluster</InputLabel>
        <Select
          labelId="admin-cluster-label"
          value={selectedAdminCluster}
          label="Cluster"
          onChange={handleClusterChange}
        >
          {Object.entries(adminClusterList).map(([key, value]) => (
            <MenuItem key={key} value={key} disabled={key === 'service_account'}>
              {`${key} (${value})`}
            </MenuItem>
          ))}
        </Select>
      </FormControl>
    </Grid>
  );
}


---

✅ In DashboardAppPage.js

Use userClusterList and selectedUserCluster:

import { useContext } from 'react';
import { ClusterContext } from './ClusterContext'; // Adjust path
import clusterNameToLabel from './utils'; // optional mapping

export default function DashboardAppPage() {
  const {
    userClusterList,
    selectedUserCluster,
    setSelectedUserCluster,
  } = useContext(ClusterContext);

  const handleClusterChange = (event) => {
    setSelectedUserCluster(event.target.value);
  };

  return (
    <Grid item sm={4} md={4.5} lg={4.5}>
      <FormControl fullWidth size="medium">
        <InputLabel id="user-cluster-label">Cluster</InputLabel>
        <Select
          className="clusterBOX"
          labelId="user-cluster-label"
          value={selectedUserCluster}
          label="Cluster"
          onChange={handleClusterChange}
        >
          {Object.entries(userClusterList).map(([key, value]) => (
            <MenuItem key={key} value={key} disabled={key === 'service_account'}>
              {`${clusterNameToLabel?.[key] || key} (${value} Jobs)`}
            </MenuItem>
          ))}
        </Select>
      </FormControl>
    </Grid>
  );
}


---

✅ Summary

Component	Uses Cluster Data From

AdminDashboard	adminClusterList, selectedAdminCluster
DashboardAppPage	userClusterList, selectedUserCluster


You now have isolated admin and user views without separating providers, and with minimal changes to your structure.

Let me know if you’d like to lazy-load data or optimize further (e.g., fetching only when the dashboard is viewed).

