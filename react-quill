const QueueRequestForm = () => {
  const { userID, selectedCluster } = useContext(ClusterContext);
  const {
    control,
    handleSubmit,
    reset,
    watch,
    unregister,
    setValue,
    formState: { errors },
  } = useForm({
    shouldUnregister: true,
    mode: 'onChange',
    defaultValues: {
      QUEUE: 'priority',
    },
  });

  const [openSnackbar, setOpenSnackbar] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [snackbarSeverity, setSnackbarSeverity] = useState('success');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [selectedPLMItem, setSelectedPLMItem] = useState(null); 
  const [selectedGroupItems, setSelectedGroupItems] = useState([]); 
  const [inputValue, setInputValue] = useState('');
  const [debouncedInputValue, setDebouncedInputValue] = useDebounce(inputValue, 1000);
  const [openDialog, setOpenDialog] = useState(false);
  const [clusterSelected, setClusterSelected] = useState(false);
  const [ldapError, setLdapError] = useState(null); // For PLM_AID errors
  const [ldapUnixError, setLdapUnixError] = useState(null); // For GROUP_AID errors

  const handleQueueChange = (e, field) => {
    const selectedValue = e.target.value;
    field.onChange(e);
    setValue('LSB_OPTION', false);

    if (selectedValue === 'hwsim' && selectedCluster === 'dal-design') {
      setOpenDialog(true);
    }
  };

  const handleDialogClose = () => {
    setOpenDialog(false);
    setValue('QUEUE', 'priority');
  };

  const handleSnackbarClose = (event, reason) => {
    if (reason === 'clickaway') {
      return;
    }
    setOpenSnackbar(false);
  };

  const today = dayjs();

  const onSubmit = async (data) => {
    setIsSubmitting(true);
    if (data.QUEUE === 'priority') {
      if (data.PG_DATE) {
        data.PG_DATE = dayjs(data.PG_DATE).format('YYYY-MM-DD');
      }
      data.PLM_AID = data.PLM_AID ? data.PLM_AID.uid : '';
    }
    data.REQUEST_STATUS = 'PENDING';
    data.USER_AID = userID;
    data.SUBMISSION_DATE = today.format('YYYY-MM-DD');

    data.GROUP_AID = data.GROUP_AID ? data.GROUP_AID.map((item) => item.uid).join(',') : '';

    data.LSB_OPTION = data.LSB_OPTION || false;
    data.SLOT_POOL = data.LSB_OPTION ? data.SLOT_POOL : 50;
    try {
      const response = await apiInstance.post('/queue_request', data);
      if (response.status === 200) {
        setSnackbarSeverity('success');
        setSnackbarMessage('Request submitted successfully!');
        setOpenSnackbar(true);
        handleReset();
      }
    } catch (error) {
      console.error('Submission failed:', error);
      setSnackbarSeverity('error');
      setSnackbarMessage('Failed to submit request. Please try again.');
      setOpenSnackbar(true);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleReset = () => {
    setSelectedGroupItems([]);
    setSelectedPLMItem(null);
    reset();
  };

  const handlePLMSelectionChange = (e, value) => {
    setSelectedPLMItem(value); 
    setValue('PLM_AID', value);
    console.log(value, 'PLM_AID onChange');
  };

  const handleGroupSelectionChange = (e, value) => {
    setSelectedGroupItems(value);
    setValue('GROUP_AID', value);
    console.log(value, 'GROUP_AID onChange');
  };

  const fetchLDAP = async (inputValue) => {
    try {
      const res = await apiInstance.get(`/ldap?userInput=${inputValue}`);
      setLdapError(null); // Clear any previous errors
      return res.data || [];
    } catch (error) {
      setLdapError(error.response?.data?.error_message || 'Failed to fetch LDAP data.');
      return [];
    }
  };

  const fetchLDAPUnix = async (inputValue, clusterName) => {
    try {
      const res = await apiInstance.get(`/unix_ldap?userInput=${inputValue}&clusterName=${clusterName}`);
      setLdapUnixError(null); // Clear any previous errors
      return res.data || [];
    } catch (error) {
      setLdapUnixError(error.response?.data?.error_message || 'Failed to fetch Unix LDAP data.');
      return [];
    }
  };

  const isQueryEnabled = !!debouncedInputValue.trim();
  const { data: ldapData = [], isLoading: queryLoading } = useQuery(
    ['ldap', debouncedInputValue],
    () => fetchLDAP(debouncedInputValue),
    {
      enabled: isQueryEnabled,
    }
  );

  const { data: ldapUnixData = [], isLoading: queryUnixLoading } = useQuery(
    ['ldap_unix', debouncedInputValue, watch('CLUSTER_NAME')],
    () => fetchLDAPUnix(debouncedInputValue, watch('CLUSTER_NAME')),
    {
      enabled: isQueryEnabled && clusterSelected,
    }
  );

  const isLoading = isQueryEnabled && (queryLoading || queryUnixLoading);

  return (
    <>
      <Paper elevation={24} square={false}>
        <form onSubmit={handleSubmit(onSubmit)} noValidate>
          <Grid
            container
            borderRadius={2}
            ml={0}
            rowSpacing={1}
            pb={1}
            pr={1}
            columnSpacing={1}
            justifyContent={'center'}
            alignItems={'center'}
          >
            {/* Existing code for QUEUE, PROJECT_NAME, etc. */}

            {/* PLM_AID Autocomplete */}
            {watch('QUEUE') === 'priority' && (
              <Grid
                item
                xs={watch('LSB_OPTION') && watch('QUEUE') === 'priority' ? 6 : 12}
                md={watch('LSB_OPTION') && watch('QUEUE') === 'priority' ? 6 : 12}
              >
                <FormControl fullWidth variant="outlined">
                  <Controller
                    name="PLM_AID"
                    control={control}
                    rules={{
                      required: 'PLM AID is required',
                      pattern: {
                        value: /^[aA]\d{7}$/, // Regex pattern for AID only
                        message: 'Please enter a valid AID.',
                      },
                    }}
                    defaultValue={null}
                    render={({ field }) => (
                      <Autocomplete
                        {...field}
                        id="PLM_AID"
                        loading={isLoading}
                        loadingText={'Searching ...'}
                        options={ldapData || []}
                        getOptionLabel={(option) => `${option.cn} (${option.uid})`}
                        onChange={(e, value) => {
                          handlePLMSelectionChange(e, value);
                        }}
                        value={selectedPLMItem}
                        isOptionEqualToValue={(option, value) => option.uid === value?.uid}
                        filterOptions={(x) => x}
                        noOptionsText={ldapError || 'No options found'} // Display error message if no options
                        renderInput={(params) => (
                          <TextField
                            {...params}
                            onChange={(e) => setInputValue(e.target.value)}
                            label="Enter PLM AID"
                            placeholder="Enter PLM AID"
                            InputProps={{
                              ...params.InputProps,
                              endAdornment: (
                                <>
                                  {isLoading ? <CircularProgress color="inherit" size={20} /> : null}
                                  {params.InputProps.endAdornment}
                                </>
                              ),
                            }}
                            error={!!errors.PLM_AID || !!ldapError}
                            helperText={errors?.PLM_AID?.message || ldapError}
                          />
                        )}
                      />
                    )}
                  />
                </FormControl>
              </Grid>
            )}

            {/* GROUP_AID Autocomplete */}
            <Grid item md={12}>
              <FormControl fullWidth variant="outlined">
                <Controller
                  name="GROUP_AID"
                  control={control}
                  rules={{
                    validate: (value) => (value && value.length > 0 ? true : 'At least one Group Aid is required'),
                  }}
                  render={({ field }) => (
                    <Autocomplete
                      {...field}
                      multiple
                      id="GROUP_AID"
                      disableCloseOnSelect
                      loading={isLoading}
                      loadingText={'Searching ...'}
                      options={ldapUnixData || []}
                      getOptionLabel={(option) => `${option.cn} (${option.uid})`}
                      onChange={(e, value) => {
                        handleGroupSelectionChange(e, value);
                        field.onChange(value);
                      }}
                      value={selectedGroupItems}
                      isOptionEqualToValue={(option, value) => option.uid === value?.uid}
                      filterOptions={(x) => x}
                      noOptionsText={ldapUnixError || 'No options found'} // Display error message if no options
                      renderInput={(params) => (
                        <TextField
                          {...params}
                          onChange={(e) => setInputValue(e.target.value)}
                          label="Requesting For(AIDs)"
                          placeholder="Group AIDs"
                          InputProps={{
                            ...params.InputProps,
                            endAdornment: (
                              <>
                                {isLoading ? <CircularProgress color="inherit" size={20} /> : null}
                                {params.InputProps.endAdornment}
                              </>
                            ),
                          }}
                          error={!!errors.GROUP_AID || !!ldapUnixError}
                          helperText={errors?.GROUP_AID?.message || ldapUnixError}
                        />
                      )}
                    />
                  )}
                />
              </FormControl>
            </Grid>

            {/* Existing code for JUSTIFICATION, buttons, etc. */}
          </Grid>
        </form>
      </Paper>
    </>
  );
};
export default QueueRequestForm;
