tTo support branch-based log file naming, with special handling where:

dev ‚ûù dev_api_errors.log, dev_cron_jobs.log

stage ‚ûù stage_api_errors.log, stage_cron_jobs.log

prod ‚ûù api_errors.log, cron_jobs.log (no prefix for prod)


You need to update both the frontend and backend to handle file naming logic based on the branch.


---

‚úÖ React (Frontend) Changes

Update fetchLogs to include BRANCH_NAME, so the backend knows what environment it‚Äôs fetching logs for:

const fetchLogs = async () => {
  try {
    const response = await apiInstance.get(
      `/get_log_viewer_data/${logType}?branch=${BRANCH_NAME}`
    );
    setLogContent(response.data);
    setLastUpdated(new Date().toLocaleString());
    setErrorMsg('');
  } catch (error) {
    if (error.response && error.response.status === 401) {
      console.log('SSO Timeout');
      setSessionTimeout(true);
    } else {
      setErrorMsg('Error fetching logs');
      setLogContent('');
    }
  }
};

No other frontend change needed unless you're also planning on uploading/writing logs from the frontend (which currently isn't happening).


---

‚úÖ Flask (Backend) Changes

Replace the current LOG_FILES dict with logic that dynamically builds filenames based on the branch from the request, not just from os.environ.

üîÅ Replace this:

logs_branch_name = os.getenv('BRANCH_NAME', 'dev')
is_dev = logs_branch_name in ['dev', 'local']

LOG_FILES = {
    'api': os.path.join(LOG_DIR, 'dev_api_errors.log' if is_dev else 'api_errors.log'),
    'cron': os.path.join(LOG_DIR, 'dev_cron_jobs.log' if is_dev else 'cron_jobs.log')
}

‚úÖ With this:

def get_log_filepath(log_type, branch_name):
    filename_prefix = ''
    branch_name = branch_name.lower()
    
    if branch_name in ['dev', 'stage']:
        filename_prefix = f"{branch_name}_"  # e.g., dev_api_errors.log
    # prod: no prefix
    
    if log_type == 'api':
        filename = f"{filename_prefix}api_errors.log"
    elif log_type == 'cron':
        filename = f"{filename_prefix}cron_jobs.log"
    else:
        return None

    return os.path.join(LOG_DIR, filename)

üîÅ Update the route:

@app.route(f'{API_URL_PREFIX}/get_log_viewer_data/<log_type>', methods=['GET'])
def get_log_viewer_data(log_type):
    try:
        branch_name = request.args.get('branch', 'dev')  # default to dev
        filepath = get_log_filepath(log_type, branch_name)

        if not filepath or not os.path.exists(filepath):
            return jsonify({"error_message": f"Log file not found: {filepath}"}), 500

        with open(filepath, 'r') as file:
            content = file.read()

        return content, 200, {'Content-Type': 'text/plain'}
    except Exception as e:
        write_to_api_log(f"[/get_log_viewer_data] Error: {str(e)}")
        return jsonify({"error_message": f"Error: {str(e)}"}), 500

‚úç Writing logs still uses os.environ (or you could also allow write_to_*_log functions to accept a branch param):

If needed, update write_to_cron_log and write_to_api_log to also use get_log_filepath() based on current env.


---

‚úÖ Summary

Component	What to Update

React	Pass branch in API call
Flask (Read logs)	Dynamically generate log filenames using query param
Flask (Write logs)	Optional: Also apply dynamic naming, or use env var


Let me know if you want me to modify the write logic as well or support fallback behaviors.

