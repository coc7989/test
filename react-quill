const QueueRequestForm = () => {
  const { userID, selectedCluster } = useContext(ClusterContext);
  const {
    control,
    handleSubmit,
    reset,
    watch,
    unregister,
    setValue,
    formState: { errors },
  } = useForm({
    shouldUnregister: true,
    mode: 'onChange',
    defaultValues: {
      QUEUE: 'priority',
    },
  });

  const [openSnackbar, setOpenSnackbar] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [snackbarSeverity, setSnackbarSeverity] = useState('success');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [selectedPLMItem, setSelectedPLMItem] = useState(null); 
  const [selectedGroupItems, setSelectedGroupItems] = useState([]); 
  const [inputValue, setInputValue] = useState('');
  const [debouncedInputValue, setDebouncedInputValue] = useDebounce(inputValue, 1000);
  const [openDialog, setOpenDialog] = useState(false);
  const [clusterSelected, setClusterSelected] = useState(false);

  const handleQueueChange = (e, field) => {
    const selectedValue = e.target.value;
    field.onChange(e);
    setValue('LSB_OPTION', false);

    if (selectedValue === 'hwsim' && selectedCluster === 'dal-design') {
      setOpenDialog(true);
    }
  };

  const handleDialogClose = () => {
    setOpenDialog(false);
    setValue('QUEUE', 'priority');
  };

  const handleSnackbarClose = (event, reason) => {
    if (reason === 'clickaway') {
      return;
    }
    setOpenSnackbar(false);
  };

  const today = dayjs();

  const onSubmit = async (data) => {
    setIsSubmitting(true);
    if (data.QUEUE === 'priority') {
      if (data.PG_DATE) {
        data.PG_DATE = dayjs(data.PG_DATE).format('YYYY-MM-DD');
      }
      data.PLM_AID = data.PLM_AID ? data.PLM_AID.uid : '';
    }
    data.REQUEST_STATUS = 'PENDING';
    data.USER_AID = userID;
    data.SUBMISSION_DATE = today.format('YYYY-MM-DD');

    data.GROUP_AID = data.GROUP_AID ? data.GROUP_AID.map((item) => item.uid).join(',') : '';

    data.LSB_OPTION = data.LSB_OPTION || false;
    data.SLOT_POOL = data.LSB_OPTION ? data.SLOT_POOL : 50;
    try {
      const response = await apiInstance.post('/queue_request', data);
      if (response.status === 200) {
        setSnackbarSeverity('success');
        setSnackbarMessage('Request submitted successfully!');
        setOpenSnackbar(true);
        handleReset();
      }
    } catch (error) {
      console.error('Submission failed:', error);
      setSnackbarSeverity('error');
      setSnackbarMessage('Failed to submit request. Please try again.');
      setOpenSnackbar(true);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleReset = () => {
    setSelectedGroupItems([]);
    setSelectedPLMItem(null);
    reset();
  };

  const handlePLMSelectionChange = (e, value) => {
    setSelectedPLMItem(value); 
    setValue('PLM_AID', value);
    console.log(value, 'PLM_AID onChange');
  };

  const handleGroupSelectionChange = (e, value) => {
    setSelectedGroupItems(value);
    setValue('GROUP_AID', value);
    console.log(value, 'GROUP_AID onChange');
  };

  const fetchLDAP = async (inputValue) => {
    const res = await apiInstance.get(`/ldap?userInput=${inputValue}`);
    return res.data || {};
  };

  const fetchLDAPUnix = async (inputValue, clusterName) => {
    const res = await apiInstance.get(`/unix_ldap?userInput=${inputValue}&clusterName=${clusterName}`);
    return res.data || {};
  };

  const isQueryEnabled = !!debouncedInputValue.trim();
  const { data: ldapData = [], isLoading: queryLoading } = useQuery(
    ['ldap', debouncedInputValue],
    () => fetchLDAP(debouncedInputValue),
    {
      enabled: isQueryEnabled,
    }
  );

  const { data: ldapUnixData = [], isLoading: queryUnixLoading } = useQuery(
    ['ldap_unix', debouncedInputValue, watch('CLUSTER_NAME')],
    () => fetchLDAPUnix(debouncedInputValue, watch('CLUSTER_NAME')),
    {
      enabled: isQueryEnabled && clusterSelected,
    }
  );

  const isLoading = isQueryEnabled && (queryLoading || queryUnixLoading);

  return (
    <>
      <Paper elevation={24} square={false}>
        <form onSubmit={handleSubmit(onSubmit)} noValidate>
          <Grid
            container
            borderRadius={2}
            ml={0}
            rowSpacing={1}
            pb={1}
            pr={1}
            columnSpacing={1}
            justifyContent={'center'}
            alignItems={'center'}
          >
            <Grid item md={6}>
              <FormControl
                fullWidth
                variant="outlined"
                sx={{ alignItems: 'center', py: 1, mt: 1 }}
                error={Boolean(errors.queueList)}
              >
                <Controller
                  name="QUEUE"
                  control={control}
                  rules={{ required: 'Queue is required' }}
                  defaultValue={''}
                  render={({ field, fieldState }) => (
                    <>
                      <FormLabel id="demo-row-radio-buttons-group-label" filled focused sx={{ fontSize: '19px' }}>
                        Queues
                      </FormLabel>
                      <Select
                        {...field}
                        value={field.value || ''} // Ensure controlled input behavior
                        sx={{ width: '150px' }}
                        onChange={(e) => handleQueueChange(e, field)}
                        displayEmpty
                      >
                        <MenuItem value="" disabled>
                          Select Queue
                        </MenuItem>
                        <MenuItem value={'priority'}>Priority</MenuItem>
                        {selectedCluster === 'tii-shared' ||
                          (selectedCluster === 'dal-design' && <MenuItem value={'hwsim'}>HwSim</MenuItem>)}
                      </Select>
                      <FormHelperText>With label + helper text</FormHelperText>
                      {fieldState.error && <FormHelperText>{fieldState.error.message}</FormHelperText>}
                    </>
                  )}
                />
              </FormControl>

              {/* Dialog Box */}
              <Dialog open={openDialog} onClose={handleDialogClose}>
                <DialogTitle>Notice</DialogTitle>
                <DialogContent>Please use Palladium Box for HwSim access.</DialogContent>
                <DialogContent>Use -R "select[ws80 && palladium]" while submitting jobs</DialogContent>
                <DialogActions>
                  <Button onClick={handleDialogClose}>OK</Button>
                </DialogActions>
              </Dialog>
            </Grid>

            {selectedCluster !== 'tii-shared' && watch('QUEUE') === 'priority' && (
              <Grid item md={6}>
                <Controller
                  name="LSB_OPTION"
                  control={control}
                  defaultValue={false}
                  render={({ field }) => (
                    <FormControlLabel
                      control={<Checkbox {...field} checked={field.value} />}
                      label="Group Priority Request?"
                    />
                  )}
                />
              </Grid>
            )}
            <Grid item xs={12}>
              <FormControl fullWidth variant="outlined">
                <Controller
                  name="PROJECT_NAME"
                  control={control}
                  rules={{ required: 'Project Name is required' }}
                  defaultValue=""
                  render={({ field }) => (
                    <TextField
                      {...field}
                      label="Project Name *"
                      placeholder="Enter Project Name"
                      variant="outlined"
                      fullWidth
                      error={!!errors?.PROJECT_NAME}
                      helperText={errors?.PROJECT_NAME?.message}
                    />
                  )}
                />
              </FormControl>
            </Grid>
            {watch('QUEUE') === 'priority' && (
              <Grid item md={6}>
                <FormControl fullWidth variant="outlined" error={Boolean(errors.PG_DATE)}>
                  <Controller
                    name="PG_DATE"
                    control={control}
                    rules={{ required: 'PG Date is required' }}
                    // defaultValue=""
                    defaultValue={today}
                    render={({ field, fieldState }) => (
                      <>
                        <DatePicker
                          {...field}
                          label="PG / Major Commitment Date *"
                          placeholder="Enter Project Name"
                          disablePast
                          defaultValue={today}
                          error={!!errors?.PG_DATE}
                          helperText={errors?.PG_DATE?.message}
                        />
                        {fieldState.error && <FormHelperText> {fieldState.error.message}</FormHelperText>}
                      </>
                    )}
                  />
                </FormControl>
              </Grid>
            )}

            {watch('QUEUE') === 'priority' && (
              <Grid item md={6}>
                <FormControl fullWidth variant="outlined">
                  <Controller
                    name="JOBS"
                    control={control}
                    rules={{
                      required: 'Jobs is required',
                      pattern: {
                        value: /^\d+$/, // Regex pattern for numbers only
                        message: 'Please enter a valid number.',
                      },
                    }}
                    defaultValue=""
                    render={({ field }) => (
                      <TextField
                        {...field}
                        type="number"
                        label="No of Jobs"
                        placeholder="Enter Number of Jobs"
                        variant="outlined"
                        error={!!errors.JOBS}
                        helperText={errors?.JOBS?.message}
                      />
                    )}
                  />
                </FormControl>
              </Grid>
            )}
            {watch('QUEUE') === 'priority' && (
              <Grid item md={6}>
                <FormControl fullWidth variant="outlined" error={Boolean(errors.CPU)}>
                  <InputLabel>Select No of CPUs</InputLabel>
                  <Controller
                    name="CPU"
                    // label
                    control={control}
                    rules={{ required: 'cpus Name is required' }}
                    defaultValue=""
                    render={({ field, fieldState }) => (
                      <>
                        <Select {...field} label="Select No of CPUs">
                          <MenuItem value={'1'}>1</MenuItem>
                          <MenuItem value={'2'}>2</MenuItem>
                          <MenuItem value={'4'}>4</MenuItem>
                          <MenuItem value={'8'}>8</MenuItem>
                          <MenuItem value={'16'}>16</MenuItem>
                          <MenuItem value={'32'}>32</MenuItem>
                        </Select>
                        {fieldState.error && <FormHelperText> {fieldState.error.message}</FormHelperText>}
                      </>
                    )}
                  />
                </FormControl>
              </Grid>
            )}
            {watch('QUEUE') === 'priority' && (
              <Grid item md={6}>
                <FormControl fullWidth variant="outlined">
                  <Controller
                    name="RUN_TIME"
                    control={control}
                    rules={{
                      required: 'Run Time is required',
                      pattern: {
                        value: /^\d+$/,
                        message: 'Please enter a valid number.',
                      },
                    }}
                    defaultValue=""
                    render={({ field }) => (
                      <TextField
                        {...field}
                        type="number"
                        label="Run Time"
                        placeholder="Enter Run Time per Job in Hrs. Ex: 4"
                        variant="outlined"
                        InputProps={{ endAdornment: <InputAdornment position="end">Hrs</InputAdornment> }}
                        error={!!errors.RUN_TIME}
                        helperText={errors?.RUN_TIME?.message}
                      />
                    )}
                  />
                </FormControl>
              </Grid>
            )}
            {watch('QUEUE') === 'priority' && (
              <Grid item md={6}>
                <FormControl fullWidth variant="outlined">
                  <Controller
                    name="MEMORY"
                    control={control}
                    rules={{
                      required: 'Memory is required',
                      pattern: {
                        value: /^\d+$/, // Regex pattern for numbers only
                        message: 'Please enter a valid number.',
                      },
                    }}
                    defaultValue=""
                    render={({ field }) => (
                      <TextField
                        {...field}
                        type="number"
                        label="Memory"
                        placeholder="Enter Memory in GB"
                        variant="outlined"
                        InputProps={{ endAdornment: <InputAdornment position="end">GB</InputAdornment> }}
                        error={!!errors.MEMORY}
                        helperText={errors?.MEMORY?.message}
                      />
                    )}
                  />
                </FormControl>
              </Grid>
            )}

            <Grid item xs={watch('QUEUE') === 'priority' ? 6 : 12} md={watch('QUEUE') === 'priority' ? 6 : 12}>
              <FormControl fullWidth variant="outlined" error={Boolean(errors.CLUSTER_NAME)}>
                <InputLabel>Select Cluster</InputLabel>
                <Controller
                  name="CLUSTER_NAME"
                  control={control}
                  rules={{ required: 'Cluster Name is required' }}
                  defaultValue=""
                  render={({ field, fieldState }) => (
                    <>
                      <Select {...field} label="Select Cluster" onChange={(e) => { field.onChange(e); setClusterSelected(true); }}>
                        <MenuItem value={'tii-shared'}>India (tii-shared)</MenuItem>
                        <MenuItem value={'dal-design'}>Dallas (dal-design)</MenuItem>
                        <MenuItem value={'cdc-design'}>China (cdc-design)</MenuItem>
                        <MenuItem value={'tid'}>Freising (tid)</MenuItem>
                      </Select>
                      {fieldState.error && <FormHelperText> {fieldState.error.message}</FormHelperText>}
                    </>
                  )}
                />
              </FormControl>
            </Grid>
            {watch('QUEUE') === 'priority' && (
              <Grid
                item
                xs={watch('LSB_OPTION') && watch('QUEUE') === 'priority' ? 6 : 12}
                md={watch('LSB_OPTION') && watch('QUEUE') === 'priority' ? 6 : 12}
              >
                <FormControl fullWidth variant="outlined">
                  <Controller
                    name="PLM_AID"
                    control={control}
                    rules={{
                      required: 'PLM AID is required',
                      pattern: {
                        value: /^[aA]\d{7}$/, // Regex pattern for AID only
                        message: 'Please enter a valid AID.',
                      },
                    }}
                    defaultValue={null}
                    render={({ field }) => (
                      <Autocomplete
                        {...field}
                        id="PLM_AID"
                        loading={isLoading}
                        loadingText={'Searching ...'}
                        options={ldapData || []}
                        getOptionLabel={(option) => `${option.cn} (${option.uid})`}
                        onChange={(e, value) => {
                          handlePLMSelectionChange(e, value);
                        }}
                        value={selectedPLMItem}
                        isOptionEqualToValue={(option, value) => option.uid === value?.uid}
                        filterOptions={(x) => x}
                        renderInput={(params) => (
                          <TextField
                            {...params}
                            onChange={(e) => setInputValue(e.target.value)}
                            label="Enter PLM AID"
                            placeholder="Enter PLM AID"
                            InputProps={{
                              ...params.InputProps,
                              endAdornment: (
                                <>
                                  {isLoading ? <CircularProgress color="inherit" size={20} /> : null}
                                  {params.InputProps.endAdornment}
                                </>
                              ),
                            }}
                            error={!!errors.PLM_AID}
                            helperText={errors?.PLM_AID?.message}
                          />
                        )}
                      />
                    )}
                  />
                </FormControl>
              </Grid>
            )}

            {watch('LSB_OPTION') && watch('QUEUE') === 'priority' && (
              <Grid item md={6}>
                <Controller
                  name="SLOT_POOL"
                  control={control}
                  defaultValue={50}
                  render={({ field }) => (
                    <TextField
                      {...field}
                      label="Slot Pool"
                      placeholder="Enter Slot Pool"
                      variant="outlined"
                      fullWidth
                    />
                  )}
                />
              </Grid>
            )}

            <Grid item md={12}>
              <FormControl fullWidth variant="outlined">
                <Controller
                  name="GROUP_AID"
                  control={control}
                  rules={{
                    validate: (value) => (value && value.length > 0 ? true : 'At least one Group Aid is required'),
                  }}
                  render={({ field }) => (
                    <Autocomplete
                      {...field}
                      multiple
                      id="GROUP_AID"
                      disableCloseOnSelect
                      loading={isLoading}
                      loadingText={'Searching ...'}
                      options={ldapUnixData || []}
                      getOptionLabel={(option) => `${option.cn} (${option.uid})`}
                      onChange={(e, value) => {
                        handleGroupSelectionChange(e, value);
                        field.onChange(value);
                      }}
                      value={selectedGroupItems}
                      isOptionEqualToValue={(option, value) => option.uid === value?.uid}
                      filterOptions={(x) => x}
                      renderInput={(params) => (
                        <TextField
                          {...params}
                          onChange={(e) => setInputValue(e.target.value)}
                          label="Requesting For(AIDs)"
                          placeholder="Group AIDs"
                          InputProps={{
                            ...params.InputProps,
                            endAdornment: (
                              <>
                                {isLoading ? <CircularProgress color="inherit" size={20} /> : null}
                                {params.InputProps.endAdornment}
                              </>
                            ),
                          }}
                          error={!!errors.GROUP_AID}
                          helperText={errors?.GROUP_AID?.message}
                        />
                      )}
                    />
                  )}
                />
              </FormControl>
            </Grid>

            <Grid item xs={12}>
              <FormControl fullWidth variant="outlined">
                <Controller
                  name="JUSTIFICATION"
                  control={control}
                  rules={{ required: 'Business Justification is required' }}
                  defaultValue=""
                  render={({ field }) => (
                    <TextField
                      {...field}
                      label="Business Justification"
                      variant="outlined"
                      placeholder="Enter Business Justification"
                      fullWidth
                      multiline
                      rows={2}
                      error={!!errors?.JUSTIFICATION}
                      helperText={
                        errors?.JUSTIFICATION
                          ? `${errors.JUSTIFICATION.message}`
                          : 'Please explain the business impact (e.g. customer deadline/milestone missed, loss of revenue)'
                      }
                    />
                  )}
                />
              </FormControl>
            </Grid>
          </Grid>
          <Stack
            spacing={2}
            direction={'row'}
            justifyContent={'center'}
            //   m={1}
            p={2}
          >
            <Button type="submit" variant="contained" color="primary">
              Submit
            </Button>
            <Button type="button" variant="contained" color="primary" onClick={handleReset}>
              Reset
            </Button>
          </Stack>
        </form>
        <Backdrop open={isSubmitting} sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}>
          <CircularProgress color="inherit" />
          <Typography variant="h6" sx={{ marginLeft: 2 }}>
            Submitting...
          </Typography>
        </Backdrop>
      </Paper>
      <SnackbarAlert
        open={openSnackbar}
        handleClose={handleSnackbarClose}
        message={snackbarMessage}
        severity={snackbarSeverity}
      />

      <DevTool control={control} />
    </>
  );
};
export default QueueRequestForm;


def getLdapData(userInput):
    server = Server(ldapHost, use_ssl=True)
    conn = Connection(server, auto_bind=True)

    filter = f'(&(|(cn=*{userInput}*)(uid={userInput}*))(objectclass=top))'
    attributes = ['cn','uid','mail','supervisor']
    conn.search(ldapBaseDN, filter, attributes=attributes)

    entries = []
    for entry in conn.entries:
        if 'uid' not in entry or not entry['uid'].values:
            print(f"Missing or empty UID for entry: {entry}")
        if 'cn' not in entry or not entry['cn'].values:
            print(f"Missing or empty CN for entry: {entry}")
        if 'mail' not in entry or not entry['mail'].values:
            print(f"Missing or empty Email for entry: {entry}")
        if 'supervisor' not in entry or not entry['supervisor'].values:
            print(f"Missing or empty Supervisor for entry: {entry}")
        
        entries.append({
            'uid': entry['uid'][0] if 'uid' in entry and entry['uid'].values else '', 
            'cn': entry['cn'][0] if 'cn' in entry and entry['cn'].values else '', 
            'email': entry['mail'][0] if 'mail' in entry and entry['mail'].values else '', 
            'supervisor': entry['supervisor'][0] if 'supervisor' in entry and entry['supervisor'].values else ''
        })

    return entries

def getLdapDataUnix(userInput, clusterName):
    ldapHostUnix = config.get('LDAP','LDAPhostunix')
    ldapBaseDNUnix = config.get('LDAP', f'baseunix_{clusterName}')
    server = Server(ldapHostUnix, use_ssl=True)
    conn = Connection(server, auto_bind=True)

    filter = f'(&(|(cn=*{userInput}*)(uid={userInput}*))(objectclass=top))'
    attributes = ['cn','uid']
    conn.search(ldapBaseDNUnix, filter, attributes=attributes)
    unix_entries = []

    for entry in conn.entries:
        if 'uid' not in entry or not entry['uid'].values:
            print(f"Missing or empty UID for entry: {entry}")
        if 'cn' not in entry or not entry['cn'].values:
            print(f"Missing or empty CN for entry: {entry}")
        
        unix_entries.append({
            'uid': entry['uid'][0] if 'uid' in entry and entry['uid'].values else '', 
            'cn': entry['cn'][0] if 'cn' in entry and entry['cn'].values else '', 
        })

    return unix_entries

@app.route(f"{API_URL_PREFIX}/ldap", methods=['GET'])
def search():
    userInput = request.args.get('userInput')
    if not userInput:
        return jsonify({'error_message': 'Missing User Id'}), 400

    entries = getLdapData(userInput)
    if not entries:
        return jsonify({'error_message': 'No Records Found'}), 200

    return jsonify(entries), 200

@app.route(f"{API_URL_PREFIX}/unix_ldap", methods=['GET'])
def unix_search():
    userInput = request.args.get('userInput')
    clusterName = request.args.get('clusterName')
    if not userInput or not clusterName:
        return jsonify({'error_message': 'Missing User ID or Cluster Name'}), 400

    entries = getLdapData(userInput)
    if not entries:
        return jsonify({'error_message': 'No Records Found in LDAP'}), 200

    unix_entries = getLdapDataUnix(userInput, clusterName)
    if not unix_entries:
        return jsonify({'error_message': 'No Unix Account Found'}), 200

    return jsonify(unix_entries), 200
