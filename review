I want to build a full-stack web application with the following architecture and functional specifications:


---

üì¶ Tech Stack

Frontend: React.js with material-react-table

Backend: Python with Flask

CI/CD: Jenkins (triggering pipelines)

Database: Any supported SQL DB (e.g., PostgreSQL or MySQL)

Version Control for Config: RCS (ckconfig, reconfig commands used)



---

üéØ Functional Requirements

1. SLA Management UI (React)

Build a dashboard that displays a table of SLA data using material-react-table.

The user should first select a Cluster Name from a dropdown.

After selection, the user will click a "Fetch SLA" button.

This triggers a loading screen.

A Jenkins pipeline is triggered in the background via the backend.

The pipeline fetches two sources: bsla and lsb.resources.


Once the data is returned:

Display the SLA distribution in the table with the following columns:

Column	Description

SLA Name	SERVICE CLASS NAME from bsla
SLA Guaranteed	GUARANTEE CONFIG from bsla
SLA Used	GUARANTEE USED from bsla
Total Used SLA	TOTAL USED from bsla
SLA Percentage (*)	Editable cell; fetched from lsb.resources, matched by service class name
Last Modified By	From the database; records who last modified the SLA %



SLA Percentage should be editable for each row.

A user can make changes to multiple rows at once.

At the bottom of the table:

"Save" button:

Triggers another Jenkins pipeline call via the backend.

Sends:

SLA Names (rows that were modified)

New SLA % values

Cluster name


Backend captures:

Username

Timestamp

SLA Name

Old Value ‚ûù New Value

Cluster Name

This is saved in a change history audit table.



"Cancel" button:

Reverts unsaved changes to their original values.

Does not trigger any backend call.





---

‚öôÔ∏è Backend Requirements (Flask)

REST APIs for:

Fetching available cluster names.

Triggering Jenkins pipeline to retrieve SLA data (bsla and lsb.resources).

Submitting updated SLA values (trigger Jenkins to update lsb.resources).

Auditing and saving SLA change history.


Jenkins Integration:

Trigger pipeline with parameters:

cluster_name

Modified SLA rows (sla name + new value)


On success:

Use RCS to:

Checkout lsb.resources file

Modify values programmatically

Check in the file

Run ckconfig and reconfig




Error handling:

If Jenkins fails, return appropriate error to frontend.

Log detailed error for traceability.


Security:

Record the authenticated user making changes.

Only allow authenticated users to access the dashboard.




---

‚úÖ Additional Requirements & Edge Cases to Handle

Show loading spinners during:

Initial SLA fetch

SLA save pipeline trigger


Handle Jenkins timeout, failure, or unreachable service

Display user-friendly error


SLA Percentage must:

Accept only numeric values (with validations)

Be within defined limits (e.g., 0-100)


Prevent save if:

No changes are made

Invalid values exist in any row


Frontend must:

Preserve unsaved edits in-memory

Disable "Save" until there's at least one valid change


Database must:

Store a full change history log for audit trail


Support for:

Multi-user environment (concurrent editing not required, but no data corruption)




---

üìÅ Deliverables

Frontend:

React components with clean structure, state management, and error handling


Backend:

Flask routes, Jenkins integration, data validation, and audit logging


Jenkins pipeline:

Scripts to handle input parameters, safely modify config, and commit


Database schema:

sla_changes table with fields:

id, cluster_name, sla_name, old_value, new_value, modified_by, timestamp





---

üõ†Ô∏è Request

Please provide production-quality code for this system with:

Modular and maintainable structure

Complete input validation and error handling

All edge cases handled (see above)

Security considerations (auth, input sanitization, etc.)

Backend tests (where appropriate)
