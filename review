@cross_origin()
def identify_users():
    sso_active = check_sso_status(request)
    if not sso_active:
        return jsonify({'message': 'SSO Timeout'}), 401

    try:
        ping_data = sso_data()
        branch_name = os.getenv('BRANCH_NAME', 'local')
        userid = request.args.get('user') if branch_name == "local" else ping_data.get('userID')

        if not userid:
            return jsonify({'error': 'User ID not provided'}), 400

        conn = get_oracle_connection()
        cursor = conn.cursor()

        try:
            user_map_tbl = dbCfg.get('USER_MAP_TBL')
            cursor.execute(f'''SELECT CLUSTER_NAME FROM {user_map_tbl} WHERE USERID LIKE :userid''', {'userid': userid})
            cluster_result = cursor.fetchone()

            if not cluster_result:
                return Response(response="Unauthorized", status=401)

            cluster_name = cluster_result[0]
            query_results = {}

            queries = {
                'tii-shared': f"SELECT COUNT(*) FROM {dbCfg['tii-shared-bjobs']} WHERE USERID LIKE :userid",
                'dal-design': f"SELECT COUNT(*) FROM {dbCfg['dal-design-bjobs']} WHERE USERID LIKE :userid",
            }

            for cluster_key, sql in queries.items():
                cursor.execute(sql, {'userid': userid})
                count = cursor.fetchone()[0]
                if count > 0 or cluster_key == cluster_name:
                    query_results[cluster_key] = count

            query_results['default'] = cluster_name

            # Fetch service accounts
            cursor.execute(f'''
                SELECT /*+ PARALLEL(4) */ SRV_ACTS 
                FROM {dbCfg['USER_SACCT_TBL']} 
                WHERE USERID LIKE :userid
            ''', {'userid': userid})
            svc_result = cursor.fetchone()
            query_results['service_account'] = ','.join(svc_result[0].split(';')) if svc_result else ''

            combined = {**ping_data, **query_results}
            return jsonify(combined), 200

        finally:
            if cursor:
                cursor.close()
            if conn:
                release_oracle_connection(conn)

    except Exception as e:
        write_to_api_log(f"[identify_users] Error: {str(e)}")
        return jsonify({'error': 'Internal server error'}), 500
