import os
import smtplib
from flask import request, jsonify
from flask_cors import cross_origin
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

@app.route(f"{API_URL_PREFIX}/send_rejection_email_for_admin_panel_request", methods=['POST'])
@cross_origin()
def send_rejection_email_for_admin_panel_request():
    sso_active = check_sso_status(request)
    if not sso_active:
        return jsonify({'message': 'SSO Timeout'}), 401

    if not request.is_json or not request.json:
        return jsonify({"error": "Invalid or missing JSON"}), 400

    try:
        data = request.json
        user_id = data.get('USER_AID')
        if not user_id:
            return jsonify({"error": "Missing USER_AID"}), 400

        # Load configs from environment
        branch_name = os.getenv('BRANCH_NAME', 'dev')
        smtp_server = os.getenv("SMTP_SERVER", "smtp.mail.ti.com")
        smtp_port = int(os.getenv("SMTP_PORT", 25))
        sender_email = os.getenv("EMAIL_SENDER", "noreply-mylsf@ti.com")
        to_email = os.getenv("TEST_EMAIL_OVERRIDE") if branch_name == "dev" else f"{user_id}@ti.com"

        # Generate subject and email HTML
        subject = f"{data.get('REQUEST_TYPE', '').upper()} Request Rejected for Project: {data.get('PROJECT_NAME', '')}"
        html_content = generate_rejection_email_html(data)

        # Create and send the email
        msg = MIMEMultipart()
        msg['From'] = sender_email
        msg['To'] = to_email
        msg['Subject'] = subject
        msg.attach(MIMEText(html_content, "html"))

        with smtplib.SMTP(smtp_server, smtp_port, timeout=10) as server:
            server.sendmail(sender_email, to_email, msg.as_string())

        return jsonify({"message": "Rejection email sent successfully"}), 200

    except Exception as e:
        write_to_api_log(f"[/send_rejection_email_for_admin_panel_request] Error: {str(e)}")
        return jsonify({"error": "Failed to send rejection email"}), 500
